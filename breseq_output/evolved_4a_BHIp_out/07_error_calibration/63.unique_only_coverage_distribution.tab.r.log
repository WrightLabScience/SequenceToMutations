
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | 4a+_BHI_c50_out/07_error_calibration/63.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | 4a+_BHI_c50_out/output/calibration/63.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.0024544 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 7 to 16.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  9.239645  Size:  10000 
7   16 
9.239645   10000 
7   16 
9.239645   10000 
7   16 
9.239654   10000 
7   16 
9.239645   10000.01 
7   16 
9.258474   10000 
7   16 
9.258484   10000 
7   16 
9.258474   10000.01 
7   16 
12.04785   10000 
7   16 
12.04786   10000 
7   16 
12.04785   10000.01 
7   16 
13.11265   10000 
7   16 
13.11267   10000 
7   16 
13.11265   10000.01 
7   16 
13.57762   10000 
7   16 
13.57763   10000 
7   16 
13.57762   10000.01 
7   16 
13.62751   10000 
7   16 
13.62752   10000 
7   16 
13.62751   10000.01 
7   16 
13.62923   10000 
7   16 
13.62924   10000 
7   16 
13.62923   10000.01 
7   16 
13.62923   10000 
7   16 
13.62924   10000 
7   16 
13.62923   10000.01 
Fit Mean:  13.62923  Size:  10000  Code:  2 
Try Mean:  9.239645  Size:  1000 
7   16 
9.239645   1000 
7   16 
9.239645   1000 
7   16 
9.239654   1000 
7   16 
9.239645   1000.001 
7   16 
9.258409   1000 
7   16 
9.258418   1000 
7   16 
9.258409   1000.001 
7   16 
12.05194   999.9999 
7   16 
12.05195   999.9999 
7   16 
12.05194   1000.001 
7   16 
13.11611   999.9999 
7   16 
13.11612   999.9999 
7   16 
13.11611   1000.001 
7   16 
13.58792   999.9998 
7   16 
13.58794   999.9998 
7   16 
13.58792   1000.001 
7   16 
13.64088   999.9998 
7   16 
13.64089   999.9998 
7   16 
13.64088   1000.001 
7   16 
13.64282   999.9998 
7   16 
13.64283   999.9998 
7   16 
13.64282   1000.001 
7   16 
13.64283   999.9997 
7   16 
13.64284   999.9997 
7   16 
13.64283   1000.001 
Fit Mean:  13.64283  Size:  999.9997  Code:  2 
Try Mean:  9.239645  Size:  100 
7   16 
9.239645   100 
7   16 
9.239645   100 
7   16 
9.239654   100 
7   16 
9.239645   100.0001 
7   16 
9.257725   99.99997 
7   16 
9.257735   99.99997 
7   16 
9.257725   100.0001 
7   16 
12.08166   99.99475 
7   16 
12.08167   99.99475 
7   16 
12.08166   99.99485 
7   16 
13.15423   99.99099 
7   16 
13.15424   99.99099 
7   16 
13.15423   99.99109 
7   16 
13.70005   99.98644 
7   16 
13.70006   99.98644 
7   16 
13.70005   99.98654 
7   16 
13.78661   99.98282 
7   16 
13.78662   99.98282 
7   16 
13.78661   99.98292 
7   16 
13.79202   99.97967 
7   16 
13.79204   99.97967 
7   16 
13.79202   99.97977 
7   16 
13.79614   99.97219 
7   16 
13.79615   99.97219 
7   16 
13.79614   99.97229 
7   16 
13.80555   99.93846 
7   16 
13.80556   99.93846 
7   16 
13.80555   99.93856 
7   16 
13.8192   99.84907 
7   16 
13.81922   99.84907 
7   16 
13.8192   99.84917 
7   16 
13.84273   99.58682 
7   16 
13.84275   99.58682 
7   16 
13.84273   99.58692 
7   16 
13.8815   98.87699 
7   16 
13.88151   98.87699 
7   16 
13.8815   98.87709 
7   16 
13.94986   96.90463 
7   16 
13.94987   96.90463 
7   16 
13.94986   96.90473 
7   16 
14.08456   91.16015 
7   16 
14.08457   91.16015 
7   16 
14.08456   91.16024 
7   16 
14.49632   68.42747 
7   16 
14.49633   68.42747 
7   16 
14.49632   68.42753 
7   16 
15.10928   33.3709 
7   16 
15.1093   33.3709 
7   16 
15.10928   33.37093 
Fit Mean:  20.24473  Size:  -227.3011  Code:  1 
Try Mean:  9.239645  Size:  10 
7   16 
9.239645   10 
7   16 
9.239645   10 
7   16 
9.239654   10 
7   16 
9.239645   10.00001 
7   16 
9.251761   9.999122 
7   16 
9.251771   9.999122 
7   16 
9.251761   9.999132 
7   16 
12.15328   9.916135 
7   16 
12.15329   9.916135 
7   16 
12.15328   9.916145 
7   16 
13.63035   9.941524 
7   16 
13.63036   9.941524 
7   16 
13.63035   9.941534 
7   16 
15.04907   9.947398 
7   16 
15.04909   9.947398 
7   16 
15.04907   9.947408 
7   16 
15.80851   9.879533 
7   16 
15.80853   9.879533 
7   16 
15.80851   9.879543 
7   16 
16.19552   9.749322 
7   16 
16.19554   9.749322 
7   16 
16.19552   9.749332 
7   16 
16.58123   9.476862 
7   16 
16.58125   9.476862 
7   16 
16.58123   9.476872 
7   16 
17.67338   8.374973 
7   16 
17.6734   8.374973 
7   16 
17.67338   8.374982 
7   16 
18.60375   7.312399 
7   16 
18.60377   7.312399 
7   16 
18.60375   7.312406 
7   16 
20.01026   5.815192 
7   16 
20.01028   5.815192 
7   16 
20.01026   5.815197 
7   16 
22.17132   3.704754 
7   16 
22.17134   3.704754 
7   16 
22.17132   3.704758 
7   16 
23.08784   2.969211 
7   16 
22.43891   3.490003 
7   16 
22.43893   3.490003 
7   16 
22.43891   3.490007 
7   16 
22.63257   3.437777 
7   16 
22.63259   3.437777 
7   16 
22.63257   3.43778 
7   16 
25.9807   2.875411 
7   16 
25.98073   2.875411 
7   16 
25.9807   2.875413 
7   16 
28.38023   2.811326 
7   16 
28.38025   2.811326 
7   16 
28.38023   2.811329 
7   16 
32.89633   2.654321 
7   16 
32.89636   2.654321 
7   16 
32.89633   2.654324 
7   16 
38.59548   2.38189 
7   16 
38.59552   2.38189 
7   16 
38.59548   2.381893 
7   16 
46.73239   2.359451 
7   16 
46.73243   2.359451 
7   16 
46.73239   2.359453 
7   16 
59.09684   2.009463 
7   16 
59.0969   2.009463 
7   16 
59.09684   2.009465 
7   16 
60.8734   2.103128 
7   16 
60.87346   2.103128 
7   16 
60.8734   2.10313 
7   16 
70.7903   2.070199 
7   16 
70.79037   2.070199 
7   16 
70.7903   2.070201 
7   16 
89.64424   1.946723 
7   16 
89.64433   1.946723 
7   16 
89.64424   1.946725 
7   16 
108.5882   1.890457 
7   16 
108.5883   1.890457 
7   16 
108.5882   1.890458 
7   16 
133.1087   1.873788 
7   16 
133.1089   1.873788 
7   16 
133.1087   1.87379 
7   16 
167.0459   1.82851 
7   16 
167.0461   1.82851 
7   16 
167.0459   1.828512 
7   16 
210.9746   1.814811 
7   16 
210.9748   1.814811 
7   16 
210.9746   1.814813 
7   16 
270.3224   1.779193 
7   16 
270.3227   1.779193 
7   16 
270.3224   1.779195 
7   16 
347.5299   1.77707 
7   16 
347.5302   1.77707 
7   16 
347.5299   1.777072 
7   16 
451.2018   1.751842 
7   16 
451.2023   1.751842 
7   16 
451.2018   1.751844 
7   16 
582.8871   1.748887 
7   16 
582.8876   1.748887 
7   16 
582.8871   1.748889 
7   16 
754.0449   1.739824 
7   16 
754.0457   1.739824 
7   16 
754.0449   1.739826 
7   16 
983.8461   1.736015 
7   16 
983.8471   1.736015 
7   16 
983.8461   1.736016 
7   16 
1285.913   1.730618 
7   16 
1285.915   1.730618 
7   16 
1285.913   1.73062 
7   16 
1686.845   1.728592 
7   16 
1686.847   1.728592 
7   16 
1686.845   1.728593 
7   16 
2218.375   1.724985 
7   16 
2218.378   1.724985 
7   16 
2218.375   1.724987 
7   16 
2921.706   1.724337 
7   16 
2921.709   1.724337 
7   16 
2921.706   1.724338 
7   16 
3857.837   1.721626 
7   16 
3857.841   1.721626 
7   16 
3857.837   1.721627 
7   16 
5096.5   1.721881 
7   16 
5096.505   1.721881 
7   16 
5096.5   1.721883 
7   16 
6747.832   1.719748 
7   16 
6747.839   1.719748 
7   16 
6747.832   1.719749 
7   16 
8932.466   1.720301 
7   16 
8932.475   1.720301 
7   16 
8932.466   1.720303 
7   16 
11833.44   1.718908 
7   16 
11833.45   1.718908 
7   16 
11833.44   1.71891 
7   16 
15669.9   1.71922 
7   16 
15669.92   1.71922 
7   16 
15669.9   1.719222 
7   16 
20748.09   1.718539 
7   16 
20748.11   1.718539 
7   16 
20748.09   1.718541 
7   16 
27473.46   1.718606 
7   16 
27473.49   1.718606 
7   16 
27473.46   1.718608 
Fit Mean:  27473.46  Size:  1.718606  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  27473.46  Size:  1.718606  Code:  1  Try Size:  10 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
7 16
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
Fallback to calculating off an estimate of just variance = mu + mu^2/size
Mu estimate= 9.239645  Size estimate = 5.902965 
Double fallback to calculating as just 10% of the mean
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 0
> print(nb_fit_mu);
[1] 0
> 
> print(m)
[1] 9.239645
> print(v)
[1] 23.70204
> print(D)
[1] 2.565255
> 
> print(deletion_propagation_coverage)
[1] 1
> 
> warnings()
> 
