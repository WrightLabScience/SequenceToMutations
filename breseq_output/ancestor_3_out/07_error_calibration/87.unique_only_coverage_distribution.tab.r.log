
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | p3_out/07_error_calibration/87.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | p3_out/output/calibration/87.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.00267261 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 12 to 31.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  21.18462  Size:  10000 
12   31 
21.18462   10000 
12   31 
21.18462   10000 
12   31 
21.18464   10000 
12   31 
21.18462   10000.01 
12   31 
21.19677   10000 
12   31 
21.19679   10000 
12   31 
21.19677   10000.01 
12   31 
25.16696   10000 
12   31 
25.16699   10000 
12   31 
25.16696   10000.01 
12   31 
24.83912   10000 
12   31 
24.83915   10000 
12   31 
24.83912   10000.01 
12   31 
24.80997   10000 
12   31 
24.81   10000 
12   31 
24.80997   10000.01 
12   31 
24.81059   10000 
12   31 
24.81062   10000 
12   31 
24.81059   10000.01 
12   31 
24.81059   10000 
12   31 
24.81308   10000 
12   31 
24.80811   10000 
12   31 
24.81059   10001 
12   31 
24.81059   9999 
12   31 
24.81061   10000 
12   31 
24.81309   10000 
12   31 
24.80813   10000 
12   31 
24.81061   10001 
12   31 
24.81061   9999 
Fit Mean:  24.81061  Size:  10000  Code:  2 
Try Mean:  21.18462  Size:  1000 
12   31 
21.18462   1000 
12   31 
21.18462   1000 
12   31 
21.18464   1000 
12   31 
21.18462   1000.001 
12   31 
21.19659   1000 
12   31 
21.19661   1000 
12   31 
21.19659   1000.001 
12   31 
25.16342   1000 
12   31 
25.16344   1000 
12   31 
25.16342   1000.001 
12   31 
24.87154   1000 
12   31 
24.87156   1000 
12   31 
24.87154   1000.001 
12   31 
24.84354   1000 
12   31 
24.84356   1000 
12   31 
24.84354   1000.001 
12   31 
24.84408   1000 
12   31 
24.84411   1000 
12   31 
24.84408   1000.001 
12   31 
24.84409   1000.001 
12   31 
24.84412   1000.001 
12   31 
24.84409   1000.002 
Fit Mean:  24.84409  Size:  1000.001  Code:  2 
Try Mean:  21.18462  Size:  100 
12   31 
21.18462   100 
12   31 
21.18462   100 
12   31 
21.18464   100 
12   31 
21.18462   100.0001 
12   31 
21.1951   100 
12   31 
21.19512   100 
12   31 
21.1951   100.0001 
12   31 
25.17307   100.0276 
12   31 
25.17309   100.0276 
12   31 
25.17307   100.0277 
12   31 
25.19697   100.0356 
12   31 
25.19699   100.0356 
12   31 
25.19697   100.0357 
12   31 
25.2038   100.0464 
12   31 
25.20383   100.0464 
12   31 
25.2038   100.0465 
12   31 
25.21487   100.0865 
12   31 
25.21489   100.0865 
12   31 
25.21487   100.0866 
12   31 
25.23238   100.2091 
12   31 
25.2324   100.2091 
12   31 
25.23238   100.2092 
12   31 
25.25986   100.5585 
12   31 
25.25989   100.5585 
12   31 
25.25986   100.5586 
12   31 
25.30151   101.5068 
12   31 
25.30154   101.5068 
12   31 
25.30151   101.5069 
12   31 
25.36025   103.9798 
12   31 
25.36027   103.9798 
12   31 
25.36025   103.9799 
12   31 
25.43021   110.1194 
12   31 
25.43024   110.1194 
12   31 
25.43021   110.1195 
12   31 
25.48162   124.6165 
12   31 
25.48165   124.6165 
12   31 
25.48162   124.6167 
12   31 
25.43833   158.2792 
12   31 
25.43836   158.2792 
12   31 
25.43833   158.2794 
12   31 
25.17146   231.4024 
12   31 
25.17149   231.4024 
12   31 
25.17146   231.4027 
12   31 
24.84176   320.899 
12   31 
24.84178   320.899 
12   31 
24.84176   320.8993 
12   31 
24.76063   366.3823 
12   31 
24.76065   366.3823 
12   31 
24.76063   366.3827 
12   31 
24.71599   449.2411 
12   31 
24.71601   449.2411 
12   31 
24.71599   449.2415 
12   31 
24.74387   588.0126 
12   31 
24.74389   588.0126 
12   31 
24.74387   588.0132 
12   31 
24.81945   778.2732 
12   31 
24.81948   778.2732 
12   31 
24.81945   778.274 
12   31 
24.86693   997.6369 
12   31 
24.86696   997.6369 
12   31 
24.86693   997.6379 
12   31 
24.87767   1286.701 
12   31 
24.8777   1286.701 
12   31 
24.87767   1286.703 
12   31 
24.85674   1713.907 
12   31 
24.85677   1713.907 
12   31 
24.85674   1713.909 
12   31 
24.82314   2285.226 
12   31 
24.82316   2285.226 
12   31 
24.82314   2285.229 
12   31 
24.80006   2988.683 
12   31 
24.80009   2988.683 
12   31 
24.80006   2988.686 
12   31 
24.79267   3906.773 
12   31 
24.7927   3906.773 
12   31 
24.79267   3906.777 
12   31 
24.79821   5169.962 
12   31 
24.79824   5169.962 
12   31 
24.79821   5169.967 
12   31 
24.80854   6843.601 
12   31 
24.80857   6843.601 
12   31 
24.80854   6843.608 
12   31 
24.8155   9005.729 
12   31 
24.81552   9005.729 
12   31 
24.8155   9005.738 
12   31 
24.81656   11878.27 
12   31 
24.81658   11878.27 
12   31 
24.81656   11878.28 
12   31 
24.81304   15756.56 
12   31 
24.81307   15756.56 
12   31 
24.81304   15756.57 
12   31 
24.8083   20883.01 
12   31 
24.80833   20883.01 
12   31 
24.8083   20883.03 
12   31 
24.80519   27582.88 
12   31 
24.80521   27582.88 
12   31 
24.80519   27582.91 
12   31 
24.80454   36460.16 
12   31 
24.80457   36460.16 
12   31 
24.80454   36460.2 
12   31 
24.80569   48305.97 
12   31 
24.80572   48305.97 
12   31 
24.80569   48306.01 
12   31 
24.80728   63958.78 
12   31 
24.8073   63958.78 
12   31 
24.80728   63958.85 
12   31 
24.80823   84637.33 
12   31 
24.80826   84637.33 
12   31 
24.80823   84637.41 
12   31 
24.80826   111992 
12   31 
24.80828   111992 
12   31 
24.80826   111992.1 
12   31 
24.80765   148401.3 
12   31 
24.80767   148401.3 
12   31 
24.80765   148401.4 
12   31 
24.80695   196391.1 
12   31 
24.80698   196391.1 
12   31 
24.80695   196391.3 
12   31 
24.80654   260544.4 
12   31 
24.80657   260544.4 
12   31 
24.80654   260544.6 
12   31 
24.80652   345260.7 
12   31 
24.80654   345260.7 
12   31 
24.80652   345261 
12   31 
24.80672   447480 
12   31 
24.80675   447480 
12   31 
24.80672   447480.5 
12   31 
24.8069   549699.3 
12   31 
24.80693   549699.3 
12   31 
24.8069   549699.9 
12   31 
24.807   651918.6 
12   31 
24.80702   651918.6 
12   31 
24.807   651919.3 
12   31 
24.80702   754137.9 
12   31 
24.80705   754137.9 
12   31 
24.80702   754138.7 
12   31 
24.80702   856357.3 
12   31 
24.80704   856357.3 
12   31 
24.80702   856358.1 
Fit Mean:  24.80702  Size:  856357.3  Code:  5 
Try Mean:  21.18462  Size:  10 
12   31 
21.18462   10 
12   31 
21.18462   10 
12   31 
21.18464   10 
12   31 
21.18462   10.00001 
12   31 
21.18967   10.00063 
12   31 
21.18969   10.00063 
12   31 
21.18967   10.00064 
12   31 
27.5185   13.16262 
12   31 
27.51852   13.16262 
12   31 
27.5185   13.16263 
12   31 
28.78734   14.4398 
12   31 
28.78737   14.4398 
12   31 
28.78734   14.43982 
12   31 
28.87782   14.93738 
12   31 
28.87785   14.93738 
12   31 
28.87782   14.9374 
12   31 
28.68916   17.65603 
12   31 
28.68919   17.65603 
12   31 
28.68916   17.65604 
12   31 
27.01428   26.86623 
12   31 
27.01431   26.86623 
12   31 
27.01428   26.86626 
12   31 
18.60519   73.26001 
12   31 
26.17337   31.50561 
12   31 
26.1734   31.50561 
12   31 
26.17337   31.50564 
12   31 
24.88492   41.75108 
12   31 
24.88494   41.75108 
12   31 
24.88492   41.75112 
12   31 
25.35256   41.70548 
12   31 
25.35259   41.70548 
12   31 
25.35256   41.70552 
12   31 
25.67838   48.67941 
12   31 
25.67841   48.67941 
12   31 
25.67838   48.67946 
12   31 
25.64472   62.30099 
12   31 
25.64475   62.30099 
12   31 
25.64472   62.30105 
12   31 
25.19467   88.81477 
12   31 
25.1947   88.81477 
12   31 
25.19467   88.81486 
12   31 
24.93095   118.4139 
12   31 
24.93098   118.4139 
12   31 
24.93095   118.414 
12   31 
24.92005   154.2536 
12   31 
24.92007   154.2536 
12   31 
24.92005   154.2538 
12   31 
24.95739   205.2235 
12   31 
24.95742   205.2235 
12   31 
24.95739   205.2237 
12   31 
24.91941   272.0941 
12   31 
24.91943   272.0941 
12   31 
24.91941   272.0943 
12   31 
24.88497   362.616 
12   31 
24.88499   362.616 
12   31 
24.88497   362.6164 
12   31 
24.86706   481.1631 
12   31 
24.86708   481.1631 
12   31 
24.86706   481.1636 
12   31 
24.85185   638.6196 
12   31 
24.85188   638.6196 
12   31 
24.85185   638.6202 
12   31 
24.84112   846.969 
12   31 
24.84114   846.969 
12   31 
24.84112   846.9698 
12   31 
24.8326   1123.04 
12   31 
24.83262   1123.04 
12   31 
24.8326   1123.041 
12   31 
24.82641   1488.694 
12   31 
24.82643   1488.694 
12   31 
24.82641   1488.695 
12   31 
24.82157   1973.084 
12   31 
24.82159   1973.084 
12   31 
24.82157   1973.086 
12   31 
24.81802   2614.742 
12   31 
24.81805   2614.742 
12   31 
24.81802   2614.744 
12   31 
24.81526   3464.753 
12   31 
24.81529   3464.753 
12   31 
24.81526   3464.757 
12   31 
24.81324   4590.766 
12   31 
24.81327   4590.766 
12   31 
24.81324   4590.771 
12   31 
24.81167   6082.412 
12   31 
24.81169   6082.412 
12   31 
24.81167   6082.418 
12   31 
24.81051   8058.42 
12   31 
24.81054   8058.42 
12   31 
24.81051   8058.428 
12   31 
24.80962   10676.1 
12   31 
24.80964   10676.1 
12   31 
24.80962   10676.11 
12   31 
24.80896   14143.62 
12   31 
24.80899   14143.62 
12   31 
24.80896   14143.63 
12   31 
24.80845   18737.41 
12   31 
24.80847   18737.41 
12   31 
24.80845   18737.43 
12   31 
24.80807   24822.38 
12   31 
24.8081   24822.38 
12   31 
24.80807   24822.4 
12   31 
24.80778   32884.6 
12   31 
24.8078   32884.6 
12   31 
24.80778   32884.64 
12   31 
24.80757   43560.62 
12   31 
24.80759   43560.62 
12   31 
24.80757   43560.66 
12   31 
24.8074   57716.24 
12   31 
24.80743   57716.24 
12   31 
24.8074   57716.3 
12   31 
24.80728   76447.02 
12   31 
24.80731   76447.02 
12   31 
24.80728   76447.1 
12   31 
24.80719   99873.25 
12   31 
24.80721   99873.25 
12   31 
24.80719   99873.35 
12   31 
24.80714   123299.5 
12   31 
24.80716   123299.5 
12   31 
24.80714   123299.6 
12   31 
24.8071   146725.7 
12   31 
24.80713   146725.7 
12   31 
24.8071   146725.8 
12   31 
24.80708   170151.9 
12   31 
24.8071   170151.9 
12   31 
24.80708   170152.1 
12   31 
24.80706   193578.1 
12   31 
24.80708   193578.1 
12   31 
24.80706   193578.3 
Fit Mean:  24.80706  Size:  193578.1  Code:  5 
Try Mean:  21.18462  Size:  1 
12   31 
21.18462   1 
12   31 
21.18462   1 
12   31 
21.18464   1 
12   31 
21.18462   1.000001 
12   31 
21.18554   1.002689 
12   31 
21.18556   1.002689 
12   31 
21.18554   1.00269 
12   31 
7390.029   19887.88 
12   31 
758.0699   1989.691 
12   31 
384.1538   980.5737 
12   31 
131.4099   298.474 
12   31 
50.41494   79.88639 
12   31 
29.46476   23.34647 
12   31 
29.46479   23.34647 
12   31 
29.46476   23.3465 
12   31 
27.74194   18.8165 
12   31 
27.74196   18.8165 
12   31 
27.74194   18.81652 
12   31 
28.01935   19.5921 
12   31 
28.01938   19.5921 
12   31 
28.01935   19.59212 
12   31 
28.01919   19.6416 
12   31 
28.01922   19.6416 
12   31 
28.01919   19.64162 
12   31 
27.20205   28.56925 
12   31 
27.20208   28.56925 
12   31 
27.20205   28.56928 
12   31 
22.96877   64.15586 
12   31 
25.72406   40.99381 
12   31 
25.72408   40.99381 
12   31 
25.72406   40.99385 
12   31 
24.75226   52.60104 
12   31 
24.75229   52.60104 
12   31 
24.75226   52.60109 
12   31 
25.15014   52.46243 
12   31 
25.15016   52.46243 
12   31 
25.15014   52.46248 
12   31 
25.48221   60.6385 
12   31 
25.48224   60.6385 
12   31 
25.48221   60.63856 
12   31 
25.51036   75.98094 
12   31 
25.51038   75.98094 
12   31 
25.51036   75.98102 
12   31 
25.20667   106.0409 
12   31 
25.20669   106.0409 
12   31 
25.20667   106.041 
12   31 
24.91903   144.422 
12   31 
24.91905   144.422 
12   31 
24.91903   144.4222 
12   31 
24.86725   185.0973 
12   31 
24.86728   185.0973 
12   31 
24.86725   185.0975 
12   31 
24.91072   247.2849 
12   31 
24.91075   247.2849 
12   31 
24.91072   247.2852 
12   31 
24.90737   325.5141 
12   31 
24.9074   325.5141 
12   31 
24.90737   325.5144 
12   31 
24.87509   433.9856 
12   31 
24.87512   433.9856 
12   31 
24.87509   433.986 
12   31 
24.85425   575.7361 
12   31 
24.85427   575.7361 
12   31 
24.85425   575.7367 
12   31 
24.84321   763.8167 
12   31 
24.84323   763.8167 
12   31 
24.84321   763.8175 
12   31 
24.83464   1012.548 
12   31 
24.83466   1012.548 
12   31 
24.83464   1012.549 
12   31 
24.82783   1342.305 
12   31 
24.82786   1342.305 
12   31 
24.82783   1342.306 
12   31 
24.82271   1779.009 
12   31 
24.82273   1779.009 
12   31 
24.82271   1779.01 
12   31 
24.81884   2357.557 
12   31 
24.81886   2357.557 
12   31 
24.81884   2357.559 
12   31 
24.81591   3123.929 
12   31 
24.81594   3123.929 
12   31 
24.81591   3123.932 
12   31 
24.81371   4139.163 
12   31 
24.81373   4139.163 
12   31 
24.81371   4139.167 
12   31 
24.81204   5484.044 
12   31 
24.81206   5484.044 
12   31 
24.81204   5484.05 
12   31 
24.81078   7265.637 
12   31 
24.8108   7265.637 
12   31 
24.81078   7265.644 
12   31 
24.80983   9625.727 
12   31 
24.80985   9625.727 
12   31 
24.80983   9625.736 
12   31 
24.80911   12752.15 
12   31 
24.80914   12752.15 
12   31 
24.80911   12752.17 
12   31 
24.80857   16893.84 
12   31 
24.80859   16893.84 
12   31 
24.80857   16893.85 
12   31 
24.80816   22380.2 
12   31 
24.80818   22380.2 
12   31 
24.80816   22380.23 
12   31 
24.80785   29649.53 
12   31 
24.80787   29649.53 
12   31 
24.80785   29649.56 
12   31 
24.80762   39278.12 
12   31 
24.80764   39278.12 
12   31 
24.80762   39278.16 
12   31 
24.80744   52035.13 
12   31 
24.80747   52035.13 
12   31 
24.80744   52035.18 
12   31 
24.80731   68922.48 
12   31 
24.80733   68922.48 
12   31 
24.80731   68922.55 
12   31 
24.80721   90130.69 
12   31 
24.80724   90130.69 
12   31 
24.80721   90130.78 
12   31 
24.80716   111338.9 
12   31 
24.80718   111338.9 
12   31 
24.80716   111339 
12   31 
24.80712   132547.1 
12   31 
24.80714   132547.1 
12   31 
24.80712   132547.2 
12   31 
24.80709   153755.3 
12   31 
24.80711   153755.3 
12   31 
24.80709   153755.5 
12   31 
24.80707   174963.5 
12   31 
24.80709   174963.5 
12   31 
24.80707   174963.7 
Fit Mean:  24.80707  Size:  174963.5  Code:  5 
Try Mean:  21.18462  Size:  0.1 
12   31 
21.18462   0.1 
12   31 
21.18462   0.1 
12   31 
21.18464   0.1 
12   31 
21.18462   0.100001 
12   31 
21.18472   0.1032895 
12   31 
21.18474   0.1032895 
12   31 
21.18472   0.1032905 
12   31 
28.44018   14.47011 
12   31 
28.44021   14.47011 
12   31 
28.44018   14.47013 
12   31 
29.32569   16.25391 
12   31 
29.32572   16.25391 
12   31 
29.32569   16.25393 
12   31 
28.9142   15.84261 
12   31 
28.91423   15.84261 
12   31 
28.9142   15.84263 
12   31 
28.49661   15.96143 
12   31 
28.49664   15.96143 
12   31 
28.49661   15.96145 
12   31 
27.22816   17.44786 
12   31 
27.22819   17.44786 
12   31 
27.22816   17.44788 
12   31 
26.50216   19.63202 
12   31 
26.50219   19.63202 
12   31 
26.50216   19.63204 
12   31 
25.77365   25.4922 
12   31 
25.77368   25.4922 
12   31 
25.77365   25.49223 
12   31 
25.87253   34.42506 
12   31 
25.87256   34.42506 
12   31 
25.87253   34.42509 
12   31 
25.45849   47.29644 
12   31 
25.45851   47.29644 
12   31 
25.45849   47.29649 
12   31 
25.41961   64.65634 
12   31 
25.41963   64.65634 
12   31 
25.41961   64.65641 
12   31 
24.94664   89.59404 
12   31 
24.94667   89.59404 
12   31 
24.94664   89.59413 
12   31 
25.20928   122.6946 
12   31 
25.2093   122.6946 
12   31 
25.20928   122.6947 
12   31 
24.99774   162.0953 
12   31 
24.99777   162.0953 
12   31 
24.99774   162.0955 
12   31 
24.90987   218.6275 
12   31 
24.9099   218.6275 
12   31 
24.90987   218.6277 
12   31 
24.90647   289.0094 
12   31 
24.90649   289.0094 
12   31 
24.90647   289.0097 
12   31 
24.88117   384.3256 
12   31 
24.8812   384.3256 
12   31 
24.88117   384.326 
12   31 
24.86381   510.0583 
12   31 
24.86384   510.0583 
12   31 
24.86381   510.0588 
12   31 
24.84958   676.8434 
12   31 
24.84961   676.8434 
12   31 
24.84958   676.8441 
12   31 
24.83938   897.6445 
12   31 
24.8394   897.6445 
12   31 
24.83938   897.6454 
12   31 
24.83128   1190.176 
12   31 
24.8313   1190.176 
12   31 
24.83128   1190.178 
12   31 
24.82543   1577.652 
12   31 
24.82546   1577.652 
12   31 
24.82543   1577.654 
12   31 
24.8208   2090.948 
12   31 
24.82083   2090.948 
12   31 
24.8208   2090.95 
12   31 
24.81747   2770.898 
12   31 
24.8175   2770.898 
12   31 
24.81747   2770.901 
12   31 
24.81482   3671.638 
12   31 
24.81484   3671.638 
12   31 
24.81482   3671.641 
12   31 
24.81293   4864.851 
12   31 
24.81296   4864.851 
12   31 
24.81293   4864.855 
12   31 
24.81141   6445.517 
12   31 
24.81143   6445.517 
12   31 
24.81141   6445.524 
12   31 
24.81034   8539.464 
12   31 
24.81037   8539.464 
12   31 
24.81034   8539.472 
12   31 
24.80946   11313.35 
12   31 
24.80949   11313.35 
12   31 
24.80946   11313.36 
12   31 
24.80887   14987.99 
12   31 
24.80889   14987.99 
12   31 
24.80887   14988 
12   31 
24.80836   19855.88 
12   31 
24.80838   19855.88 
12   31 
24.80836   19855.9 
12   31 
24.80802   26304.08 
12   31 
24.80805   26304.08 
12   31 
24.80802   26304.1 
12   31 
24.80773   34845.37 
12   31 
24.80775   34845.37 
12   31 
24.80773   34845.41 
12   31 
24.80754   46163.29 
12   31 
24.80757   46163.29 
12   31 
24.80754   46163.34 
12   31 
24.80737   61156.3 
12   31 
24.80739   61156.3 
12   31 
24.80737   61156.36 
12   31 
24.80727   81004.66 
12   31 
24.80729   81004.66 
12   31 
24.80727   81004.74 
12   31 
24.80718   102189.5 
12   31 
24.80721   102189.5 
12   31 
24.80718   102189.6 
12   31 
24.80714   123374.4 
12   31 
24.80717   123374.4 
12   31 
24.80714   123374.5 
12   31 
24.80711   144559.2 
12   31 
24.80713   144559.2 
12   31 
24.80711   144559.4 
12   31 
24.80708   165744.1 
12   31 
24.80711   165744.1 
12   31 
24.80708   165744.2 
12   31 
24.80706   186928.9 
12   31 
24.80709   186928.9 
12   31 
24.80706   186929.1 
Fit Mean:  24.80706  Size:  186928.9  Code:  5 
Try Mean:  21.18462  Size:  0.01 
12   31 
21.18462   0.01 
12   31 
21.18462   0.01 
12   31 
21.18464   0.01 
12   31 
21.18462   0.010001 
12   31 
21.18463   0.01335939 
12   31 
21.18465   0.01335939 
12   31 
21.18463   0.01336039 
12   31 
26.85164   11.66778 
12   31 
26.85167   11.66778 
12   31 
26.85164   11.6678 
12   31 
31.77052   20.03235 
12   31 
29.04528   15.39807 
12   31 
29.04531   15.39807 
12   31 
29.04528   15.39809 
12   31 
28.92505   15.52013 
12   31 
28.92508   15.52013 
12   31 
28.92505   15.52015 
12   31 
23.43016   24.79377 
12   31 
27.34792   18.18183 
12   31 
27.34795   18.18183 
12   31 
27.34792   18.18184 
12   31 
25.06144   24.16154 
12   31 
25.06147   24.16154 
12   31 
25.06144   24.16156 
12   31 
26.36532   22.93913 
12   31 
26.36534   22.93913 
12   31 
26.36532   22.93915 
12   31 
26.45702   25.60035 
12   31 
26.45705   25.60035 
12   31 
26.45702   25.60038 
12   31 
26.01317   36.84361 
12   31 
26.01319   36.84361 
12   31 
26.01317   36.84365 
12   31 
25.19156   52.27677 
12   31 
25.19159   52.27677 
12   31 
25.19156   52.27682 
12   31 
25.17847   67.44706 
12   31 
25.17849   67.44706 
12   31 
25.17847   67.44712 
12   31 
25.18321   91.02194 
12   31 
25.18324   91.02194 
12   31 
25.18321   91.02203 
12   31 
24.99552   122.7924 
12   31 
24.99555   122.7924 
12   31 
24.99552   122.7925 
12   31 
25.08243   165.1278 
12   31 
25.08245   165.1278 
12   31 
25.08243   165.1279 
12   31 
24.85678   225.3057 
12   31 
24.8568   225.3057 
12   31 
24.85678   225.3059 
12   31 
24.90618   296.8507 
12   31 
24.9062   296.8507 
12   31 
24.90618   296.851 
12   31 
24.87955   394.2952 
12   31 
24.87957   394.2952 
12   31 
24.87955   394.2956 
12   31 
24.86196   523.5726 
12   31 
24.86199   523.5726 
12   31 
24.86196   523.5731 
12   31 
24.84836   694.5773 
12   31 
24.84838   694.5773 
12   31 
24.84836   694.578 
12   31 
24.83829   921.1896 
12   31 
24.83831   921.1896 
12   31 
24.83829   921.1906 
12   31 
24.83057   1221.302 
12   31 
24.83059   1221.302 
12   31 
24.83057   1221.303 
12   31 
24.8248   1618.879 
12   31 
24.82483   1618.879 
12   31 
24.8248   1618.881 
12   31 
24.8204   2145.523 
12   31 
24.82043   2145.523 
12   31 
24.8204   2145.526 
12   31 
24.81711   2843.176 
12   31 
24.81713   2843.176 
12   31 
24.81711   2843.179 
12   31 
24.8146   3767.356 
12   31 
24.81462   3767.356 
12   31 
24.8146   3767.36 
12   31 
24.81272   4991.624 
12   31 
24.81274   4991.624 
12   31 
24.81272   4991.629 
12   31 
24.81129   6613.438 
12   31 
24.81131   6613.438 
12   31 
24.81129   6613.444 
12   31 
24.81022   8761.851 
12   31 
24.81024   8761.851 
12   31 
24.81022   8761.859 
12   31 
24.8094   11607.94 
12   31 
24.80942   11607.94 
12   31 
24.8094   11607.95 
12   31 
24.80879   15378.05 
12   31 
24.80881   15378.05 
12   31 
24.80879   15378.06 
12   31 
24.80832   20372.73 
12   31 
24.80835   20372.73 
12   31 
24.80832   20372.75 
12   31 
24.80798   26988.57 
12   31 
24.808   26988.57 
12   31 
24.80798   26988.6 
12   31 
24.80771   35752.74 
12   31 
24.80774   35752.74 
12   31 
24.80771   35752.78 
12   31 
24.80751   47361.46 
12   31 
24.80754   47361.46 
12   31 
24.80751   47361.51 
12   31 
24.80736   62738.96 
12   31 
24.80739   62738.96 
12   31 
24.80736   62739.02 
12   31 
24.80725   83130.4 
12   31 
24.80727   83130.4 
12   31 
24.80725   83130.49 
12   31 
24.80718   104315 
12   31 
24.80721   104315 
12   31 
24.80718   104315.1 
12   31 
24.80714   125499.6 
12   31 
24.80716   125499.6 
12   31 
24.80714   125499.8 
12   31 
24.8071   146684.3 
12   31 
24.80713   146684.3 
12   31 
24.8071   146684.4 
12   31 
24.80708   167868.9 
12   31 
24.8071   167868.9 
12   31 
24.80708   167869 
12   31 
24.80706   189053.5 
12   31 
24.80709   189053.5 
12   31 
24.80706   189053.7 
Fit Mean:  24.80706  Size:  189053.5  Code:  5 
Try Mean:  21.18462  Size:  0.001 
12   31 
21.18462   0.001 
12   31 
21.18462   0.001 
12   31 
21.18464   0.001 
12   31 
21.18462   0.001001 
12   31 
21.18462   0.004366494 
12   31 
21.18464   0.004366494 
12   31 
21.18462   0.004367494 
12   31 
26.71932   11.43647 
12   31 
26.71934   11.43647 
12   31 
26.71932   11.43648 
12   31 
32.08719   20.54279 
12   31 
29.05749   15.40307 
12   31 
29.05752   15.40307 
12   31 
29.05749   15.40308 
12   31 
28.92818   15.50739 
12   31 
28.9282   15.50739 
12   31 
28.92818   15.5074 
12   31 
24.84964   21.71304 
12   31 
26.96246   18.4983 
12   31 
26.96249   18.4983 
12   31 
26.96246   18.49832 
12   31 
25.99518   21.7386 
12   31 
25.9952   21.7386 
12   31 
25.99518   21.73862 
12   31 
25.85714   26.4031 
12   31 
25.85717   26.4031 
12   31 
25.85714   26.40312 
12   31 
26.01791   36.76897 
12   31 
26.01794   36.76897 
12   31 
26.01791   36.769 
12   31 
25.11224   52.27448 
12   31 
25.11226   52.27448 
12   31 
25.11224   52.27453 
12   31 
25.27785   68.14954 
12   31 
25.27788   68.14954 
12   31 
25.27785   68.14961 
12   31 
25.10834   92.9877 
12   31 
25.10837   92.9877 
12   31 
25.10834   92.9878 
12   31 
25.08967   124.1149 
12   31 
25.08969   124.1149 
12   31 
25.08967   124.115 
12   31 
24.94055   167.2984 
12   31 
24.94057   167.2984 
12   31 
24.94055   167.2986 
12   31 
25.01497   224.3555 
12   31 
25.015   224.3555 
12   31 
25.01497   224.3558 
12   31 
24.84066   304.5099 
12   31 
24.84068   304.5099 
12   31 
24.84066   304.5102 
12   31 
24.88158   401.8078 
12   31 
24.88161   401.8078 
12   31 
24.88158   401.8082 
12   31 
24.86025   533.1092 
12   31 
24.86028   533.1092 
12   31 
24.86025   533.1098 
12   31 
24.84736   707.5475 
12   31 
24.84738   707.5475 
12   31 
24.84736   707.5482 
12   31 
24.83734   938.142 
12   31 
24.83737   938.142 
12   31 
24.83734   938.1429 
12   31 
24.82993   1243.822 
12   31 
24.82996   1243.822 
12   31 
24.82993   1243.823 
12   31 
24.82428   1648.615 
12   31 
24.8243   1648.615 
12   31 
24.82428   1648.617 
12   31 
24.82003   2184.903 
12   31 
24.82006   2184.903 
12   31 
24.82003   2184.905 
12   31 
24.81681   2895.286 
12   31 
24.81684   2895.286 
12   31 
24.81681   2895.289 
12   31 
24.81439   3836.354 
12   31 
24.81441   3836.354 
12   31 
24.81439   3836.358 
12   31 
24.81255   5082.986 
12   31 
24.81258   5082.986 
12   31 
24.81255   5082.991 
12   31 
24.81117   6734.41 
12   31 
24.81119   6734.41 
12   31 
24.81117   6734.416 
12   31 
24.81012   8922.089 
12   31 
24.81015   8922.089 
12   31 
24.81012   8922.098 
12   31 
24.80933   11820.19 
12   31 
24.80936   11820.19 
12   31 
24.80933   11820.2 
12   31 
24.80873   15659.26 
12   31 
24.80876   15659.26 
12   31 
24.80873   15659.28 
12   31 
24.80829   20744.91 
12   31 
24.80831   20744.91 
12   31 
24.80829   20744.93 
12   31 
24.80795   27481.77 
12   31 
24.80797   27481.77 
12   31 
24.80795   27481.8 
12   31 
24.80769   36405.98 
12   31 
24.80771   36405.98 
12   31 
24.80769   36406.01 
12   31 
24.80749   48230 
12   31 
24.80752   48230 
12   31 
24.80749   48230.05 
12   31 
24.80735   63890.17 
12   31 
24.80737   63890.17 
12   31 
24.80735   63890.23 
12   31 
24.80724   84644.82 
12   31 
24.80726   84644.82 
12   31 
24.80724   84644.91 
12   31 
24.80717   105829.4 
12   31 
24.8072   105829.4 
12   31 
24.80717   105829.5 
12   31 
24.80713   127014.1 
12   31 
24.80716   127014.1 
12   31 
24.80713   127014.2 
12   31 
24.8071   148198.7 
12   31 
24.80712   148198.7 
12   31 
24.8071   148198.8 
12   31 
24.80708   169383.3 
12   31 
24.8071   169383.3 
12   31 
24.80708   169383.5 
12   31 
24.80706   190567.9 
12   31 
24.80708   190567.9 
12   31 
24.80706   190568.1 
Fit Mean:  24.80706  Size:  190567.9  Code:  5 
Try Mean:  31  Size:  10000 
12   31 
31   10000 
12   31 
31   10000 
12   31 
31.00003   10000 
12   31 
31   10000.01 
12   31 
30.9888   10000 
12   31 
30.98883   10000 
12   31 
30.9888   10000.01 
12   31 
14.09165   10000 
12   31 
25.6118   10000 
12   31 
25.61182   10000 
12   31 
25.6118   10000.01 
12   31 
24.16022   10000 
12   31 
24.16024   10000 
12   31 
24.16022   10000.01 
12   31 
24.84095   10000 
12   31 
24.84097   10000 
12   31 
24.84095   10000.01 
12   31 
24.8116   10000 
12   31 
24.81162   10000 
12   31 
24.8116   10000.01 
12   31 
24.81059   10000 
12   31 
24.81062   10000 
12   31 
24.81059   10000.01 
12   31 
24.81059   10000 
12   31 
24.81062   10000 
12   31 
24.81059   10000.01 
Fit Mean:  24.81059  Size:  10000  Code:  2 
Try Mean:  31  Size:  1000 
12   31 
31   1000 
12   31 
31   1000 
12   31 
31.00003   1000 
12   31 
31   1000.001 
12   31 
30.98919   1000 
12   31 
30.98922   1000 
12   31 
30.98919   1000.001 
12   31 
14.39031   1000.006 
12   31 
25.70672   1000.002 
12   31 
25.70675   1000.002 
12   31 
25.70672   1000.003 
12   31 
24.14209   1000.003 
12   31 
24.14212   1000.003 
12   31 
24.14209   1000.004 
12   31 
24.88014   1000.003 
12   31 
24.88017   1000.003 
12   31 
24.88014   1000.004 
12   31 
24.84539   1000.003 
12   31 
24.84542   1000.003 
12   31 
24.84539   1000.004 
12   31 
24.84408   1000.004 
12   31 
24.8441   1000.004 
12   31 
24.84408   1000.005 
12   31 
24.84406   1000.004 
12   31 
24.84408   1000.004 
12   31 
24.84406   1000.005 
Fit Mean:  24.84406  Size:  1000.004  Code:  2 
Try Mean:  31  Size:  100 
12   31 
31   100 
12   31 
31   100 
12   31 
31.00003   100 
12   31 
31   100.0001 
12   31 
30.99229   99.9999 
12   31 
30.99232   99.9999 
12   31 
30.99229   100 
12   31 
17.25977   100.3143 
12   31 
26.36816   100.1058 
12   31 
26.36819   100.1058 
12   31 
26.36816   100.1059 
12   31 
24.28449   100.2496 
12   31 
24.28452   100.2496 
12   31 
24.28449   100.2497 
12   31 
25.27503   100.2103 
12   31 
25.27506   100.2103 
12   31 
25.27503   100.2104 
12   31 
25.20391   100.2485 
12   31 
25.20394   100.2485 
12   31 
25.20391   100.2486 
12   31 
25.19484   100.2914 
12   31 
25.19487   100.2914 
12   31 
25.19484   100.2915 
12   31 
25.15501   100.6788 
12   31 
25.15503   100.6788 
12   31 
25.15501   100.6789 
12   31 
25.10563   101.593 
12   31 
25.10566   101.593 
12   31 
25.10563   101.5931 
12   31 
25.01884   104.3698 
12   31 
25.01887   104.3698 
12   31 
25.01884   104.3699 
12   31 
24.90219   110.9057 
12   31 
24.90222   110.9057 
12   31 
24.90219   110.9058 
12   31 
24.7724   125.1622 
12   31 
24.77243   125.1622 
12   31 
24.7724   125.1623 
12   31 
24.69427   152.4849 
12   31 
24.6943   152.4849 
12   31 
24.69427   152.4851 
12   31 
24.75211   200.1311 
12   31 
24.75214   200.1311 
12   31 
24.75211   200.1313 
12   31 
24.89382   263.7848 
12   31 
24.89384   263.7848 
12   31 
24.89382   263.785 
12   31 
24.96359   335.405 
12   31 
24.96362   335.405 
12   31 
24.96359   335.4053 
12   31 
24.96025   435.7997 
12   31 
24.96027   435.7997 
12   31 
24.96025   435.8001 
12   31 
24.89694   587.3562 
12   31 
24.89697   587.3562 
12   31 
24.89694   587.3568 
12   31 
24.83007   780.2679 
12   31 
24.83009   780.2679 
12   31 
24.83007   780.2687 
12   31 
24.79657   1015.22 
12   31 
24.7966   1015.22 
12   31 
24.79657   1015.221 
12   31 
24.79431   1335.065 
12   31 
24.79433   1335.065 
12   31 
24.79431   1335.067 
12   31 
24.81013   1768.093 
12   31 
24.81016   1768.093 
12   31 
24.81013   1768.095 
12   31 
24.82381   2330.591 
12   31 
24.82384   2330.591 
12   31 
24.82381   2330.594 
12   31 
24.82668   3074.35 
12   31 
24.82671   3074.35 
12   31 
24.82668   3074.353 
12   31 
24.82063   4078.017 
12   31 
24.82066   4078.017 
12   31 
24.82063   4078.021 
12   31 
24.81225   5408.245 
12   31 
24.81228   5408.245 
12   31 
24.81225   5408.251 
12   31 
24.80689   7153.804 
12   31 
24.80692   7153.804 
12   31 
24.80689   7153.811 
12   31 
24.80573   9466.491 
12   31 
24.80575   9466.491 
12   31 
24.80573   9466.501 
12   31 
24.80712   12539.2 
12   31 
24.80714   12539.2 
12   31 
24.80712   12539.21 
12   31 
24.80874   16604.04 
12   31 
24.80876   16604.04 
12   31 
24.80874   16604.06 
12   31 
24.80927   21985.55 
12   31 
24.80929   21985.55 
12   31 
24.80927   21985.57 
12   31 
24.80871   29126.43 
12   31 
24.80874   29126.43 
12   31 
24.80871   29126.46 
12   31 
24.80777   38591.45 
12   31 
24.80779   38591.45 
12   31 
24.80777   38591.49 
12   31 
24.80707   51113.39 
12   31 
24.80709   51113.39 
12   31 
24.80707   51113.45 
12   31 
24.80684   67716.92 
12   31 
24.80686   67716.92 
12   31 
24.80684   67716.99 
12   31 
24.80693   89671.77 
12   31 
24.80696   89671.77 
12   31 
24.80693   89671.86 
12   31 
24.80711   118816 
12   31 
24.80713   118816 
12   31 
24.80711   118816.1 
12   31 
24.80718   157288 
12   31 
24.8072   157288 
12   31 
24.80718   157288.2 
12   31 
24.80713   208563 
12   31 
24.80716   208563 
12   31 
24.80713   208563.2 
12   31 
24.80703   276668.9 
12   31 
24.80705   276668.9 
12   31 
24.80703   276669.2 
Fit Mean:  24.80703  Size:  276668.9  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  24.80703  Size:  276668.9  Code:  1  Try Size:  100 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
12 31
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
276668.9   24.80703 
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 276668.9
> print(nb_fit_mu);
[1] 24.80703
> 
> print(m)
[1] 21.18462
> print(v)
[1] 61.56368
> print(D)
[1] 2.906056
> 
> print(deletion_propagation_coverage)
[1] 12
> 
> warnings()
> 
