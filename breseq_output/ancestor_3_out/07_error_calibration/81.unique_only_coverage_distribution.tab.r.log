
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | p3_out/07_error_calibration/81.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | p3_out/output/calibration/81.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.0023338 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 14 to 35.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  26.67105  Size:  10000 
14   35 
26.67105   10000 
14   35 
26.67105   10000 
14   35 
26.67108   10000 
14   35 
26.67105   10000.01 
14   35 
26.67977   10000 
14   35 
26.67979   10000 
14   35 
26.67977   10000.01 
14   35 
31.62297   10000 
14   35 
31.623   10000 
14   35 
31.62297   10000.01 
14   35 
30.59678   10000 
14   35 
30.59681   10000 
14   35 
30.59678   10000.01 
14   35 
30.586   10000 
14   35 
30.58603   10000 
14   35 
30.586   10000.01 
14   35 
30.58642   10000 
14   35 
30.58645   10000 
14   35 
30.58642   10000.01 
14   35 
30.58642   10000 
14   35 
30.58645   10000 
14   35 
30.58642   10000.01 
Fit Mean:  30.58642  Size:  10000  Code:  2 
Try Mean:  26.67105  Size:  1000 
14   35 
26.67105   1000 
14   35 
26.67105   1000 
14   35 
26.67108   1000 
14   35 
26.67105   1000.001 
14   35 
26.67956   1000 
14   35 
26.67959   1000 
14   35 
26.67956   1000.001 
14   35 
31.62196   1000.001 
14   35 
31.622   1000.001 
14   35 
31.62196   1000.002 
14   35 
30.6531   1000.001 
14   35 
30.65313   1000.001 
14   35 
30.6531   1000.002 
14   35 
30.63596   1000.001 
14   35 
30.63599   1000.001 
14   35 
30.63596   1000.002 
14   35 
30.63661   1000.001 
14   35 
30.63664   1000.001 
14   35 
30.63661   1000.002 
14   35 
30.63664   1000.001 
14   35 
30.63667   1000.001 
14   35 
30.63664   1000.002 
Fit Mean:  30.63664  Size:  1000.001  Code:  2 
Try Mean:  26.67105  Size:  100 
14   35 
26.67105   100 
14   35 
26.67105   100 
14   35 
26.67108   100 
14   35 
26.67105   100.0001 
14   35 
26.67797   100 
14   35 
26.678   100 
14   35 
26.67797   100.0001 
14   35 
31.7125   100.0582 
14   35 
31.71253   100.0582 
14   35 
31.7125   100.0583 
14   35 
31.22078   100.0616 
14   35 
31.22081   100.0616 
14   35 
31.22078   100.0617 
14   35 
31.17673   100.0758 
14   35 
31.17676   100.0758 
14   35 
31.17673   100.0759 
14   35 
31.17357   100.0919 
14   35 
31.1736   100.0919 
14   35 
31.17357   100.092 
14   35 
31.10456   100.7717 
14   35 
31.10459   100.7717 
14   35 
31.10456   100.7718 
14   35 
31.03195   102.1304 
14   35 
31.03198   102.1304 
14   35 
31.03195   102.1305 
14   35 
30.89543   106.4683 
14   35 
30.89546   106.4683 
14   35 
30.89543   106.4684 
14   35 
30.72885   115.8441 
14   35 
30.72888   115.8441 
14   35 
30.72885   115.8443 
14   35 
30.5647   135.314 
14   35 
30.56473   135.314 
14   35 
30.5647   135.3142 
14   35 
30.50455   171.409 
14   35 
30.50458   171.409 
14   35 
30.50455   171.4092 
14   35 
30.63491   229.9507 
14   35 
30.63494   229.9507 
14   35 
30.63491   229.9509 
14   35 
30.76505   300.9106 
14   35 
30.76508   300.9106 
14   35 
30.76505   300.9109 
14   35 
30.78452   389.4849 
14   35 
30.78455   389.4849 
14   35 
30.78452   389.4853 
14   35 
30.71608   526.7941 
14   35 
30.71611   526.7941 
14   35 
30.71608   526.7947 
14   35 
30.63141   707.7655 
14   35 
30.63144   707.7655 
14   35 
30.63141   707.7662 
14   35 
30.58969   931.7484 
14   35 
30.58972   931.7484 
14   35 
30.58969   931.7493 
14   35 
30.58683   1233.67 
14   35 
30.58686   1233.67 
14   35 
30.58683   1233.672 
14   35 
30.5995   1636.066 
14   35 
30.59953   1636.066 
14   35 
30.5995   1636.068 
14   35 
30.60543   2165.551 
14   35 
30.60546   2165.551 
14   35 
30.60543   2165.554 
14   35 
30.60101   2873.079 
14   35 
30.60104   2873.079 
14   35 
30.60101   2873.082 
14   35 
30.59279   3814.147 
14   35 
30.59282   3814.147 
14   35 
30.59279   3814.151 
14   35 
30.58694   5056.998 
14   35 
30.58697   5056.998 
14   35 
30.58694   5057.003 
14   35 
30.58474   6702.027 
14   35 
30.58477   6702.027 
14   35 
30.58474   6702.033 
14   35 
30.58448   8881.553 
14   35 
30.58451   8881.553 
14   35 
30.58448   8881.562 
14   35 
30.58435   11768.64 
14   35 
30.58438   11768.64 
14   35 
30.58435   11768.66 
14   35 
30.58375   15594.62 
14   35 
30.58378   15594.62 
14   35 
30.58375   15594.63 
14   35 
30.58292   20663.53 
14   35 
30.58296   20663.53 
14   35 
30.58292   20663.55 
14   35 
30.58225   27378.98 
14   35 
30.58228   27378.98 
14   35 
30.58225   27379.01 
14   35 
30.58184   36273.23 
14   35 
30.58187   36273.23 
14   35 
30.58184   36273.26 
14   35 
30.58163   48056.83 
14   35 
30.58166   48056.83 
14   35 
30.58163   48056.87 
14   35 
30.58149   63661.54 
14   35 
30.58152   63661.54 
14   35 
30.58149   63661.61 
14   35 
30.58137   84330 
14   35 
30.5814   84330 
14   35 
30.58137   84330.09 
14   35 
30.58125   111738.9 
14   35 
30.58128   111738.9 
14   35 
30.58125   111739 
14   35 
30.58115   147980.7 
14   35 
30.58118   147980.7 
14   35 
30.58115   147980.9 
14   35 
30.58108   196245.9 
14   35 
30.58111   196245.9 
14   35 
30.58108   196246.1 
14   35 
30.58104   259597 
14   35 
30.58107   259597 
14   35 
30.58104   259597.2 
14   35 
30.581   345062.9 
14   35 
30.58103   345062.9 
14   35 
30.581   345063.3 
14   35 
30.58098   448558.6 
14   35 
30.58101   448558.6 
14   35 
30.58098   448559 
14   35 
30.58097   552054.2 
14   35 
30.581   552054.2 
14   35 
30.58097   552054.7 
14   35 
30.58095   655549.8 
14   35 
30.58099   655549.8 
14   35 
30.58095   655550.5 
14   35 
30.58095   759045.4 
14   35 
30.58098   759045.4 
14   35 
30.58095   759046.2 
14   35 
30.58094   862541.1 
14   35 
30.58097   862541.1 
14   35 
30.58094   862541.9 
Fit Mean:  30.58094  Size:  862541.1  Code:  5 
Try Mean:  26.67105  Size:  10 
14   35 
26.67105   10 
14   35 
26.67105   10 
14   35 
26.67108   10 
14   35 
26.67105   10.00001 
14   35 
26.67375   10.00033 
14   35 
26.67377   10.00033 
14   35 
26.67375   10.00034 
14   35 
36.88346   15.99368 
14   35 
36.8835   15.99368 
14   35 
36.88346   15.9937 
14   35 
35.93585   15.58502 
14   35 
35.93588   15.58502 
14   35 
35.93585   15.58503 
14   35 
35.76116   15.8941 
14   35 
35.7612   15.8941 
14   35 
35.76116   15.89411 
14   35 
18.2582   52.6082 
14   35 
34.01087   19.56551 
14   35 
34.0109   19.56551 
14   35 
34.01087   19.56552 
14   35 
30.0175   31.22669 
14   35 
32.84508   22.96976 
14   35 
32.84511   22.96976 
14   35 
32.84508   22.96979 
14   35 
32.03335   28.91296 
14   35 
32.03338   28.91296 
14   35 
32.03335   28.91298 
14   35 
31.99373   40.43095 
14   35 
31.99377   40.43095 
14   35 
31.99373   40.43099 
14   35 
31.22904   57.56236 
14   35 
31.22907   57.56236 
14   35 
31.22904   57.56242 
14   35 
31.43809   82.01983 
14   35 
31.43812   82.01983 
14   35 
31.43809   82.01991 
14   35 
30.67874   118.9055 
14   35 
30.67877   118.9055 
14   35 
30.67874   118.9056 
14   35 
30.8043   149.0894 
14   35 
30.80433   149.0894 
14   35 
30.8043   149.0896 
14   35 
30.80363   205.2725 
14   35 
30.80366   205.2725 
14   35 
30.80363   205.2727 
14   35 
30.72784   274.4065 
14   35 
30.72787   274.4065 
14   35 
30.72784   274.4068 
14   35 
30.71395   369.4341 
14   35 
30.71398   369.4341 
14   35 
30.71395   369.4345 
14   35 
30.6546   494.6321 
14   35 
30.65463   494.6321 
14   35 
30.6546   494.6326 
14   35 
30.66962   661.3022 
14   35 
30.66965   661.3022 
14   35 
30.66962   661.3029 
14   35 
30.60481   885.9531 
14   35 
30.60484   885.9531 
14   35 
30.60481   885.954 
14   35 
30.6422   1184.74 
14   35 
30.64223   1184.74 
14   35 
30.6422   1184.742 
14   35 
30.59336   1582.649 
14   35 
30.59339   1582.649 
14   35 
30.59336   1582.651 
14   35 
30.60589   2103.294 
14   35 
30.60592   2103.294 
14   35 
30.60589   2103.296 
14   35 
30.59423   2790.662 
14   35 
30.59426   2790.662 
14   35 
30.59423   2790.665 
14   35 
30.59302   3703.118 
14   35 
30.59305   3703.118 
14   35 
30.59302   3703.122 
14   35 
30.58925   4909.767 
14   35 
30.58928   4909.767 
14   35 
30.58925   4909.772 
14   35 
30.58753   6509.67 
14   35 
30.58756   6509.67 
14   35 
30.58753   6509.677 
14   35 
30.58576   8628.167 
14   35 
30.58579   8628.167 
14   35 
30.58576   8628.176 
14   35 
30.58463   11435.2 
14   35 
30.58466   11435.2 
14   35 
30.58463   11435.21 
14   35 
30.58369   15153.23 
14   35 
30.58372   15153.23 
14   35 
30.58369   15153.24 
14   35 
30.58302   20078.9 
14   35 
30.58305   20078.9 
14   35 
30.58302   20078.92 
14   35 
30.58249   26604.06 
14   35 
30.58252   26604.06 
14   35 
30.58249   26604.09 
14   35 
30.5821   35246.99 
14   35 
30.58213   35246.99 
14   35 
30.5821   35247.02 
14   35 
30.58181   46702.37 
14   35 
30.58184   46702.37 
14   35 
30.58181   46702.42 
14   35 
30.58158   61858.27 
14   35 
30.58161   61858.27 
14   35 
30.58158   61858.34 
14   35 
30.58141   81975.17 
14   35 
30.58144   81975.17 
14   35 
30.58141   81975.25 
14   35 
30.58129   108598.6 
14   35 
30.58132   108598.6 
14   35 
30.58129   108598.7 
14   35 
30.58121   137082.7 
14   35 
30.58124   137082.7 
14   35 
30.58121   137082.8 
14   35 
30.58116   165566.8 
14   35 
30.58119   165566.8 
14   35 
30.58116   165567 
14   35 
30.58112   194050.9 
14   35 
30.58115   194050.9 
14   35 
30.58112   194051.1 
14   35 
30.5811   222535 
14   35 
30.58113   222535 
14   35 
30.5811   222535.3 
14   35 
30.58107   251019.2 
14   35 
30.58111   251019.2 
14   35 
30.58107   251019.4 
Fit Mean:  30.58107  Size:  251019.2  Code:  5 
Try Mean:  26.67105  Size:  1 
14   35 
26.67105   1 
14   35 
26.67105   1 
14   35 
26.67108   1 
14   35 
26.67105   1.000001 
14   35 
26.67153   1.001712 
14   35 
26.67155   1.001712 
14   35 
26.67153   1.001713 
14   35 
67.87211   61.02557 
14   35 
36.12318   14.77153 
14   35 
36.12321   14.77153 
14   35 
36.12318   14.77155 
14   35 
36.83351   15.90527 
14   35 
36.83355   15.90527 
14   35 
36.83351   15.90529 
14   35 
36.42383   15.50657 
14   35 
36.42387   15.50657 
14   35 
36.42383   15.50659 
14   35 
36.18754   15.56064 
14   35 
36.18757   15.56064 
14   35 
36.18754   15.56066 
14   35 
34.78853   16.71805 
14   35 
34.78856   16.71805 
14   35 
34.78853   16.71807 
14   35 
33.7849   18.48254 
14   35 
33.78493   18.48254 
14   35 
33.7849   18.48256 
14   35 
32.70923   22.42524 
14   35 
32.70926   22.42524 
14   35 
32.70923   22.42526 
14   35 
32.18931   29.8302 
14   35 
32.18935   29.8302 
14   35 
32.18931   29.83023 
14   35 
32.25095   41.16167 
14   35 
32.25099   41.16167 
14   35 
32.25095   41.16172 
14   35 
30.41862   65.75513 
14   35 
30.41865   65.75513 
14   35 
30.41862   65.7552 
14   35 
31.3357   71.44191 
14   35 
31.33573   71.44191 
14   35 
31.3357   71.44198 
14   35 
31.3259   90.48297 
14   35 
31.32593   90.48297 
14   35 
31.3259   90.48307 
14   35 
30.88553   131.9573 
14   35 
30.88556   131.9573 
14   35 
30.88553   131.9574 
14   35 
30.75964   176.2629 
14   35 
30.75967   176.2629 
14   35 
30.75964   176.263 
14   35 
30.78044   237.7902 
14   35 
30.78047   237.7902 
14   35 
30.78044   237.7905 
14   35 
30.70331   319.6508 
14   35 
30.70334   319.6508 
14   35 
30.70331   319.6511 
14   35 
30.69416   428.5919 
14   35 
30.69419   428.5919 
14   35 
30.69416   428.5923 
14   35 
30.64647   573.1766 
14   35 
30.6465   573.1766 
14   35 
30.64647   573.1771 
14   35 
30.65058   764.7732 
14   35 
30.65061   764.7732 
14   35 
30.65058   764.774 
14   35 
30.61104   1020.259 
14   35 
30.61107   1020.259 
14   35 
30.61104   1020.26 
14   35 
30.62702   1358.901 
14   35 
30.62705   1358.901 
14   35 
30.62702   1358.902 
14   35 
30.59218   1811.508 
14   35 
30.59221   1811.508 
14   35 
30.59218   1811.51 
14   35 
30.60868   2410.283 
14   35 
30.60871   2410.283 
14   35 
30.60868   2410.286 
14   35 
30.58806   3203.959 
14   35 
30.58809   3203.959 
14   35 
30.58806   3203.962 
14   35 
30.59445   4253.031 
14   35 
30.59448   4253.031 
14   35 
30.59445   4253.035 
14   35 
30.58659   5640.26 
14   35 
30.58662   5640.26 
14   35 
30.58659   5640.265 
14   35 
30.58763   7478.611 
14   35 
30.58766   7478.611 
14   35 
30.58763   7478.618 
14   35 
30.58465   9911.845 
14   35 
30.58469   9911.845 
14   35 
30.58465   9911.855 
14   35 
30.58446   13136.34 
14   35 
30.58449   13136.34 
14   35 
30.58446   13136.35 
14   35 
30.58318   17406.72 
14   35 
30.58321   17406.72 
14   35 
30.58318   17406.73 
14   35 
30.58284   23064.44 
14   35 
30.58288   23064.44 
14   35 
30.58284   23064.47 
14   35 
30.58224   30558.93 
14   35 
30.58227   30558.93 
14   35 
30.58224   30558.96 
14   35 
30.58198   40485.78 
14   35 
30.58201   40485.78 
14   35 
30.58198   40485.83 
14   35 
30.58168   53641.3 
14   35 
30.58171   53641.3 
14   35 
30.58168   53641.35 
14   35 
30.58151   71058.78 
14   35 
30.58154   71058.78 
14   35 
30.58151   71058.85 
14   35 
30.58134   94144.01 
14   35 
30.58137   94144.01 
14   35 
30.58134   94144.1 
14   35 
30.58125   120833.8 
14   35 
30.58128   120833.8 
14   35 
30.58125   120833.9 
14   35 
30.58119   147523.6 
14   35 
30.58122   147523.6 
14   35 
30.58119   147523.7 
14   35 
30.58115   174213.4 
14   35 
30.58118   174213.4 
14   35 
30.58115   174213.6 
14   35 
30.58112   200903.2 
14   35 
30.58115   200903.2 
14   35 
30.58112   200903.4 
14   35 
30.58109   227593 
14   35 
30.58112   227593 
14   35 
30.58109   227593.2 
Fit Mean:  30.58109  Size:  227593  Code:  5 
Try Mean:  26.67105  Size:  0.1 
14   35 
26.67105   0.1 
14   35 
26.67105   0.1 
14   35 
26.67108   0.1 
14   35 
26.67105   0.100001 
14   35 
26.6711   0.1021685 
14   35 
26.67113   0.1021685 
14   35 
26.6711   0.1021695 
14   35 
30.42815   7.201818 
14   35 
30.42818   7.201818 
14   35 
30.42815   7.201825 
14   35 
56.00463   45.14867 
14   35 
36.47127   16.16776 
14   35 
36.4713   16.16776 
14   35 
36.47127   16.16778 
14   35 
36.12473   15.82277 
14   35 
36.12477   15.82277 
14   35 
36.12473   15.82279 
14   35 
36.02865   15.92244 
14   35 
36.02868   15.92244 
14   35 
36.02865   15.92246 
14   35 
28.77856   26.6654 
14   35 
34.79323   17.75304 
14   35 
34.79326   17.75304 
14   35 
34.79323   17.75306 
14   35 
30.01546   26.80593 
14   35 
33.69442   19.83505 
14   35 
33.69446   19.83505 
14   35 
33.69442   19.83507 
14   35 
32.36837   23.79598 
14   35 
32.3684   23.79598 
14   35 
32.36837   23.796 
14   35 
32.3523   26.37406 
14   35 
32.35234   26.37406 
14   35 
32.3523   26.37408 
14   35 
32.11422   39.22687 
14   35 
32.11426   39.22687 
14   35 
32.11422   39.22691 
14   35 
30.94792   56.35481 
14   35 
30.94795   56.35481 
14   35 
30.94792   56.35487 
14   35 
31.44135   78.66813 
14   35 
31.44138   78.66813 
14   35 
31.44135   78.66821 
14   35 
30.97941   107.9583 
14   35 
30.97944   107.9583 
14   35 
30.97941   107.9584 
14   35 
30.80917   149.8198 
14   35 
30.8092   149.8198 
14   35 
30.80917   149.8199 
14   35 
30.83627   200.4967 
14   35 
30.8363   200.4967 
14   35 
30.83627   200.4969 
14   35 
30.70368   272.9144 
14   35 
30.70371   272.9144 
14   35 
30.70368   272.9146 
14   35 
30.73694   366.4428 
14   35 
30.73697   366.4428 
14   35 
30.73694   366.4431 
14   35 
30.63617   494.0385 
14   35 
30.6362   494.0385 
14   35 
30.63617   494.039 
14   35 
30.6685   661.0056 
14   35 
30.66853   661.0056 
14   35 
30.6685   661.0062 
14   35 
30.61623   882.927 
14   35 
30.61626   882.927 
14   35 
30.61623   882.9279 
14   35 
30.62441   1175.903 
14   35 
30.62444   1175.903 
14   35 
30.62441   1175.905 
14   35 
30.6042   1562.948 
14   35 
30.60423   1562.948 
14   35 
30.6042   1562.95 
14   35 
30.60404   2076.336 
14   35 
30.60407   2076.336 
14   35 
30.60404   2076.338 
14   35 
30.59494   2755.528 
14   35 
30.59497   2755.528 
14   35 
30.59494   2755.53 
14   35 
30.59369   3655.853 
14   35 
30.59372   3655.853 
14   35 
30.59369   3655.856 
14   35 
30.58911   4848.021 
14   35 
30.58914   4848.021 
14   35 
30.58911   4848.026 
14   35 
30.58807   6427.638 
14   35 
30.5881   6427.638 
14   35 
30.58807   6427.645 
14   35 
30.58564   8519.963 
14   35 
30.58567   8519.963 
14   35 
30.58564   8519.972 
14   35 
30.58494   11291.8 
14   35 
30.58498   11291.8 
14   35 
30.58494   11291.82 
14   35 
30.58362   14963.74 
14   35 
30.58365   14963.74 
14   35 
30.58362   14963.76 
14   35 
30.58319   19827.86 
14   35 
30.58322   19827.86 
14   35 
30.58319   19827.88 
14   35 
30.58246   26272.3 
14   35 
30.58249   26272.3 
14   35 
30.58246   26272.32 
14   35 
30.5822   34807.24 
14   35 
30.58223   34807.24 
14   35 
30.5822   34807.27 
14   35 
30.58179   46117.94 
14   35 
30.58182   46117.94 
14   35 
30.58179   46117.98 
14   35 
30.58163   61085.42 
14   35 
30.58166   61085.42 
14   35 
30.58163   61085.48 
14   35 
30.58141   80939.69 
14   35 
30.58144   80939.69 
14   35 
30.58141   80939.77 
14   35 
30.58131   107217.4 
14   35 
30.58134   107217.4 
14   35 
30.58131   107217.5 
14   35 
30.58122   133888.7 
14   35 
30.58125   133888.7 
14   35 
30.58122   133888.8 
14   35 
30.58117   160559.9 
14   35 
30.5812   160559.9 
14   35 
30.58117   160560.1 
14   35 
30.58113   187231.1 
14   35 
30.58116   187231.1 
14   35 
30.58113   187231.3 
14   35 
30.58111   213902.4 
14   35 
30.58114   213902.4 
14   35 
30.58111   213902.6 
14   35 
30.58108   240573.6 
14   35 
30.58112   240573.6 
14   35 
30.58108   240573.9 
Fit Mean:  30.58108  Size:  240573.6  Code:  5 
Try Mean:  26.67105  Size:  0.01 
14   35 
26.67105   0.01 
14   35 
26.67105   0.01 
14   35 
26.67108   0.01 
14   35 
26.67105   0.010001 
14   35 
26.67106   0.01222237 
14   35 
26.67108   0.01222237 
14   35 
26.67106   0.01222337 
14   35 
29.86615   6.427864 
14   35 
29.86618   6.427864 
14   35 
29.86615   6.427871 
14   35 
54.67312   44.63157 
14   35 
36.1574   16.11664 
14   35 
36.15744   16.11664 
14   35 
36.1574   16.11666 
14   35 
36.0808   16.15577 
14   35 
36.08084   16.15577 
14   35 
36.0808   16.15579 
14   35 
33.05115   19.88492 
14   35 
33.05118   19.88492 
14   35 
33.05115   19.88494 
14   35 
33.84936   20.17548 
14   35 
33.8494   20.17548 
14   35 
33.84936   20.1755 
14   35 
33.6011   24.36177 
14   35 
33.60114   24.36177 
14   35 
33.6011   24.3618 
14   35 
31.19793   40.49149 
14   35 
31.19796   40.49149 
14   35 
31.19793   40.49153 
14   35 
31.75717   45.36368 
14   35 
31.7572   45.36368 
14   35 
31.75717   45.36372 
14   35 
31.40705   66.92736 
14   35 
31.40708   66.92736 
14   35 
31.40705   66.92743 
14   35 
30.96889   92.97558 
14   35 
30.96892   92.97558 
14   35 
30.96889   92.97567 
14   35 
31.06417   129.5225 
14   35 
31.0642   129.5225 
14   35 
31.06417   129.5226 
14   35 
30.6922   180.2905 
14   35 
30.69223   180.2905 
14   35 
30.6922   180.2906 
14   35 
30.77036   240.8942 
14   35 
30.77039   240.8942 
14   35 
30.77036   240.8944 
14   35 
30.70775   323.6814 
14   35 
30.70778   323.6814 
14   35 
30.70775   323.6818 
14   35 
30.68472   433.7581 
14   35 
30.68475   433.7581 
14   35 
30.68472   433.7585 
14   35 
30.65293   579.4534 
14   35 
30.65296   579.4534 
14   35 
30.65293   579.454 
14   35 
30.64092   772.685 
14   35 
30.64095   772.685 
14   35 
30.64092   772.6857 
14   35 
30.62037   1028.877 
14   35 
30.62041   1028.877 
14   35 
30.62037   1028.878 
14   35 
30.61704   1368.163 
14   35 
30.61707   1368.163 
14   35 
30.61704   1368.165 
14   35 
30.60087   1818.477 
14   35 
30.60091   1818.477 
14   35 
30.60087   1818.479 
14   35 
30.60446   2414.903 
14   35 
30.60449   2414.903 
14   35 
30.60446   2414.905 
14   35 
30.58869   3208.113 
14   35 
30.58873   3208.113 
14   35 
30.58869   3208.116 
14   35 
30.59791   4260.529 
14   35 
30.59794   4260.529 
14   35 
30.59791   4260.534 
14   35 
30.58203   5663.652 
14   35 
30.58206   5663.652 
14   35 
30.58203   5663.658 
14   35 
30.59221   7524.696 
14   35 
30.59224   7524.696 
14   35 
30.59221   7524.704 
14   35 
30.58141   9992.754 
14   35 
30.58144   9992.754 
14   35 
30.58141   9992.764 
14   35 
30.58634   13255.42 
14   35 
30.58637   13255.42 
14   35 
30.58634   13255.43 
14   35 
30.58213   17570.8 
14   35 
30.58216   17570.8 
14   35 
30.58213   17570.82 
14   35 
30.58336   23286.07 
14   35 
30.58339   23286.07 
14   35 
30.58336   23286.09 
14   35 
30.58195   30852.96 
14   35 
30.58198   30852.96 
14   35 
30.58195   30852.99 
14   35 
30.58211   40878.92 
14   35 
30.58214   40878.92 
14   35 
30.58211   40878.96 
14   35 
30.58159   54150.86 
14   35 
30.58162   54150.86 
14   35 
30.58159   54150.91 
14   35 
30.58154   71745.93 
14   35 
30.58157   71745.93 
14   35 
30.58154   71746 
14   35 
30.58132   95072.98 
14   35 
30.58135   95072.98 
14   35 
30.58132   95073.08 
14   35 
30.58126   121744 
14   35 
30.58129   121744 
14   35 
30.58126   121744.2 
14   35 
30.58119   148415.1 
14   35 
30.58122   148415.1 
14   35 
30.58119   148415.2 
14   35 
30.58115   175086.1 
14   35 
30.58118   175086.1 
14   35 
30.58115   175086.3 
14   35 
30.58112   201757.2 
14   35 
30.58115   201757.2 
14   35 
30.58112   201757.4 
14   35 
30.58109   228428.3 
14   35 
30.58112   228428.3 
14   35 
30.58109   228428.5 
Fit Mean:  30.58109  Size:  228428.3  Code:  5 
Try Mean:  26.67105  Size:  0.001 
14   35 
26.67105   0.001 
14   35 
26.67105   0.001 
14   35 
26.67108   0.001 
14   35 
26.67105   0.001001 
14   35 
26.67105   0.003227858 
14   35 
26.67108   0.003227858 
14   35 
26.67105   0.003228858 
14   35 
29.81573   6.35808 
14   35 
29.81576   6.35808 
14   35 
29.81573   6.358087 
14   35 
54.3874   44.33421 
14   35 
36.11412   16.09239 
14   35 
36.11416   16.09239 
14   35 
36.11412   16.09241 
14   35 
36.08209   16.19828 
14   35 
36.08212   16.19828 
14   35 
36.08209   16.19829 
Fit Mean:  -25.77319  Size:  189.1218  Code:  1 
Try Mean:  35  Size:  10000 
14   35 
35   10000 
14   35 
35   10000 
14   35 
35.00003   10000 
14   35 
35   10000.01 
14   35 
34.99208   10000 
14   35 
34.99212   10000 
14   35 
34.99208   10000.01 
14   35 
28.54682   10000 
14   35 
28.54684   10000 
14   35 
28.54682   10000.01 
14   35 
30.97903   10000 
14   35 
30.97906   10000 
14   35 
30.97903   10000.01 
14   35 
30.59957   10000 
14   35 
30.5996   10000 
14   35 
30.59957   10000.01 
14   35 
30.58625   10000 
14   35 
30.58628   10000 
14   35 
30.58625   10000.01 
14   35 
30.58642   10000 
14   35 
30.58645   10000 
14   35 
30.58642   10000.01 
14   35 
30.58642   10000 
14   35 
30.58645   10000 
14   35 
30.58642   10000.01 
Fit Mean:  30.58642  Size:  10000  Code:  2 
Try Mean:  35  Size:  1000 
14   35 
35   1000 
14   35 
35   1000 
14   35 
35.00003   1000 
14   35 
35   1000.001 
14   35 
34.99251   1000 
14   35 
34.99255   1000 
14   35 
34.99251   1000.001 
14   35 
28.66557   1000.001 
14   35 
28.66559   1000.001 
14   35 
28.66557   1000.002 
14   35 
31.02524   1000 
14   35 
31.02527   1000 
14   35 
31.02524   1000.001 
14   35 
30.65124   1000 
14   35 
30.65127   1000 
14   35 
30.65124   1000.001 
14   35 
30.63641   1000.001 
14   35 
30.63644   1000.001 
14   35 
30.63641   1000.002 
14   35 
30.63661   1000.001 
14   35 
30.63664   1000.001 
14   35 
30.63661   1000.002 
14   35 
30.63675   1000.002 
14   35 
30.63678   1000.002 
14   35 
30.63675   1000.003 
14   35 
30.63709   1000.004 
14   35 
30.63712   1000.004 
14   35 
30.63709   1000.005 
14   35 
30.63758   1000.011 
14   35 
30.63761   1000.011 
14   35 
30.63758   1000.012 
14   35 
30.63841   1000.032 
14   35 
30.63844   1000.032 
14   35 
30.63841   1000.033 
14   35 
30.63972   1000.088 
14   35 
30.63975   1000.088 
14   35 
30.63972   1000.089 
14   35 
30.64185   1000.238 
14   35 
30.64188   1000.238 
14   35 
30.64185   1000.239 
14   35 
30.64528   1000.635 
14   35 
30.64531   1000.635 
14   35 
30.64528   1000.636 
14   35 
30.65079   1001.686 
14   35 
30.65082   1001.686 
14   35 
30.65079   1001.687 
14   35 
30.65958   1004.439 
14   35 
30.65961   1004.439 
14   35 
30.65958   1004.44 
14   35 
30.67336   1011.596 
14   35 
30.67339   1011.596 
14   35 
30.67336   1011.597 
14   35 
30.69411   1029.889 
14   35 
30.69414   1029.889 
14   35 
30.69411   1029.89 
14   35 
30.7226   1075.051 
14   35 
30.72263   1075.051 
14   35 
30.7226   1075.052 
14   35 
30.75397   1179.941 
14   35 
30.754   1179.941 
14   35 
30.75397   1179.942 
14   35 
30.7712   1406.33 
14   35 
30.77123   1406.33 
14   35 
30.7712   1406.331 
14   35 
30.74233   1857.427 
14   35 
30.74236   1857.427 
14   35 
30.74233   1857.429 
14   35 
30.65408   2581.925 
14   35 
30.65411   2581.925 
14   35 
30.65408   2581.927 
14   35 
30.57533   3335.026 
14   35 
30.57536   3335.026 
14   35 
30.57533   3335.029 
14   35 
30.54182   3956.864 
14   35 
30.54185   3956.864 
14   35 
30.54182   3956.868 
14   35 
30.5276   4853.332 
14   35 
30.52763   4853.332 
14   35 
30.5276   4853.336 
14   35 
30.53774   6365.972 
14   35 
30.53777   6365.972 
14   35 
30.53774   6365.979 
14   35 
30.56866   8507.85 
14   35 
30.56869   8507.85 
14   35 
30.56866   8507.859 
14   35 
30.59445   10959.9 
14   35 
30.59448   10959.9 
14   35 
30.59445   10959.91 
14   35 
30.60627   13795.88 
14   35 
30.6063   13795.88 
14   35 
30.60627   13795.9 
14   35 
30.60626   17917.5 
14   35 
30.60629   17917.5 
14   35 
30.60626   17917.52 
14   35 
30.59528   23963.63 
14   35 
30.59531   23963.63 
14   35 
30.59528   23963.65 
14   35 
30.5817   31689.06 
14   35 
30.58173   31689.06 
14   35 
30.5817   31689.09 
14   35 
30.57321   40801.51 
14   35 
30.57324   40801.51 
14   35 
30.57321   40801.56 
14   35 
30.57065   52774.68 
14   35 
30.57068   52774.68 
14   35 
30.57065   52774.73 
14   35 
30.57357   69879.89 
14   35 
30.5736   69879.89 
14   35 
30.57357   69879.96 
14   35 
30.57934   92807.53 
14   35 
30.57937   92807.53 
14   35 
30.57934   92807.63 
14   35 
30.58399   121192.8 
14   35 
30.58402   121192.8 
14   35 
30.58399   121192.9 
14   35 
30.58597   157686.5 
14   35 
30.58601   157686.5 
14   35 
30.58597   157686.7 
14   35 
30.58528   207977.9 
14   35 
30.58531   207977.9 
14   35 
30.58528   207978.1 
14   35 
30.58279   276090.8 
14   35 
30.58282   276090.8 
14   35 
30.58279   276091.1 
14   35 
30.58026   363735.9 
14   35 
30.58029   363735.9 
14   35 
30.58026   363736.2 
14   35 
30.57883   476197.4 
14   35 
30.57886   476197.4 
14   35 
30.57883   476197.9 
14   35 
30.57874   626694.9 
14   35 
30.57877   626694.9 
14   35 
30.57874   626695.5 
14   35 
30.5797   812322.8 
14   35 
30.57973   812322.8 
14   35 
30.5797   812323.6 
14   35 
30.58115   1132636 
14   35 
30.58118   1132636 
14   35 
30.58115   1132637 
14   35 
30.58163   1371129 
14   35 
30.58166   1371129 
14   35 
30.58163   1371130 
14   35 
30.58252   2371741 
14   35 
30.58255   2371741 
14   35 
30.58252   2371743 
14   35 
30.58202   2820272 
14   35 
30.58205   2820272 
14   35 
30.58202   2820275 
14   35 
30.58126   3208992 
14   35 
30.58129   3208992 
14   35 
30.58126   3208995 
14   35 
30.58074   3833008 
14   35 
30.58077   3833008 
14   35 
30.58074   3833012 
14   35 
30.58073   4047138 
14   35 
30.58076   4047138 
14   35 
30.58073   4047143 
14   35 
30.58041   4956967 
14   35 
30.58044   4956967 
14   35 
30.58041   4956972 
14   35 
30.5807   4654016 
14   35 
30.58051   4855624 
14   35 
30.58044   4927829 
14   35 
30.58042   4948315 
14   35 
30.58041   4954407 
14   35 
30.58041   4956209 
14   35 
30.58041   4956743 
14   35 
30.58041   4956902 
14   35 
30.58041   4956949 
14   35 
30.58041   4956963 
14   35 
30.58347   4956967 
14   35 
30.57735   4956967 
14   35 
30.58041   4957463 
14   35 
30.58041   4956471 
14   35 
30.58063   5111353 
14   35 
30.58369   5111353 
14   35 
30.57757   5111353 
14   35 
30.58063   5111864 
14   35 
30.58063   5110842 
14   35 
30.58074   5256160 
14   35 
30.5838   5256160 
14   35 
30.57768   5256160 
14   35 
30.58074   5256685 
14   35 
30.58074   5255634 
14   35 
30.5808   5396109 
14   35 
30.58386   5396109 
14   35 
30.57774   5396109 
14   35 
30.5808   5396649 
14   35 
30.5808   5395570 
14   35 
30.58084   5526792 
14   35 
30.58389   5526792 
14   35 
30.57778   5526792 
14   35 
30.58084   5527345 
14   35 
30.58084   5526240 
14   35 
30.58085   5651755 
14   35 
30.58391   5651755 
14   35 
30.5778   5651755 
14   35 
30.58085   5652320 
14   35 
30.58085   5651190 
14   35 
30.58086   5771455 
14   35 
30.58392   5771455 
14   35 
30.57781   5771455 
14   35 
30.58086   5772033 
14   35 
30.58086   5770878 
14   35 
30.58087   5886599 
14   35 
30.58393   5886599 
14   35 
30.57781   5886599 
14   35 
30.58087   5887187 
14   35 
30.58087   5886010 
14   35 
30.58091   6887211 
14   35 
30.58396   6887211 
14   35 
30.57785   6887211 
14   35 
30.58091   6887900 
14   35 
30.58091   6886522 
Fit Mean:  30.58091  Size:  6887211  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  30.58091  Size:  6887211  Code:  1  Try Size:  1000 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
14 35
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
6887211   30.58091 
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 6887211
> print(nb_fit_mu);
[1] 30.58091
> 
> print(m)
[1] 26.67105
> print(v)
[1] 40.9618
> print(D)
[1] 1.535815
> 
> print(deletion_propagation_coverage)
[1] 16
> 
> warnings()
> 
