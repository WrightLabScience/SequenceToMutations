
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | 4a-_BHI_c50_out/07_error_calibration/80.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | 4a-_BHI_c50_out/output/calibration/80.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.00331862 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 12 to 26.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  19.78947  Size:  10000 
12   26 
19.78947   10000 
12   26 
19.78947   10000 
12   26 
19.78949   10000 
12   26 
19.78947   10000.01 
12   26 
19.79102   10000 
12   26 
19.79104   10000 
12   26 
19.79102   10000.01 
12   26 
20.85072   10000 
12   26 
20.85074   10000 
12   26 
20.85072   10000.01 
12   26 
20.95359   10000 
12   26 
20.95362   10000 
12   26 
20.95359   10000.01 
12   26 
20.96399   10000 
12   26 
20.96402   10000 
12   26 
20.96399   10000.01 
12   26 
20.96408   10000 
12   26 
20.9641   10000 
12   26 
20.96408   10000.01 
12   26 
20.96408   10000 
12   26 
20.9641   10000 
12   26 
20.96408   10000.01 
Fit Mean:  20.96408  Size:  10000  Code:  2 
Try Mean:  19.78947  Size:  1000 
12   26 
19.78947   1000 
12   26 
19.78947   1000 
12   26 
19.78949   1000 
12   26 
19.78947   1000.001 
12   26 
19.79105   1000 
12   26 
19.79107   1000 
12   26 
19.79105   1000.001 
12   26 
20.87523   999.9995 
12   26 
20.87525   999.9995 
12   26 
20.87523   1000.001 
12   26 
20.98446   999.9992 
12   26 
20.98448   999.9992 
12   26 
20.98446   1000 
12   26 
20.99606   999.9989 
12   26 
20.99608   999.9989 
12   26 
20.99606   999.9999 
12   26 
20.99618   999.9986 
12   26 
20.9962   999.9986 
12   26 
20.99618   999.9996 
12   26 
20.99693   999.9949 
12   26 
20.99695   999.9949 
12   26 
20.99693   999.9959 
12   26 
20.9978   999.9863 
12   26 
20.99782   999.9863 
12   26 
20.9978   999.9873 
12   26 
20.99941   999.9582 
12   26 
20.99943   999.9582 
12   26 
20.99941   999.9592 
12   26 
21.0019   999.8838 
12   26 
21.00192   999.8838 
12   26 
21.0019   999.8848 
12   26 
21.00601   999.6788 
12   26 
21.00603   999.6788 
12   26 
21.00601   999.6798 
12   26 
21.01263   999.135 
12   26 
21.01265   999.135 
12   26 
21.01263   999.136 
12   26 
21.02345   997.6872 
12   26 
21.02347   997.6872 
12   26 
21.02345   997.6882 
12   26 
21.04119   993.8519 
12   26 
21.04121   993.8519 
12   26 
21.04119   993.8529 
12   26 
21.07093   983.6071 
12   26 
21.07095   983.6071 
12   26 
21.07093   983.6081 
12   26 
21.12354   955.5313 
12   26 
21.12356   955.5313 
12   26 
21.12354   955.5322 
12   26 
21.23243   871.0798 
12   26 
21.23245   871.0798 
12   26 
21.23243   871.0807 
12   26 
21.6828   438.4991 
12   26 
21.68283   438.4991 
12   26 
21.6828   438.4995 
Fit Mean:  24.3548  Size:  -2032.276  Code:  1 
Try Mean:  19.78947  Size:  100 
12   26 
19.78947   100 
12   26 
19.78947   100 
12   26 
19.78949   100 
12   26 
19.78947   100.0001 
12   26 
19.79131   99.99998 
12   26 
19.79133   99.99998 
12   26 
19.79131   100.0001 
12   26 
21.1238   99.9661 
12   26 
21.12382   99.9661 
12   26 
21.1238   99.9662 
12   26 
21.30666   99.94223 
12   26 
21.30668   99.94223 
12   26 
21.30666   99.94233 
12   26 
21.3386   99.91841 
12   26 
21.33862   99.91841 
12   26 
21.3386   99.91851 
12   26 
21.35556   99.8764 
12   26 
21.35558   99.8764 
12   26 
21.35556   99.8765 
12   26 
21.40281   99.65041 
12   26 
21.40283   99.65041 
12   26 
21.40281   99.65051 
12   26 
21.46959   99.07613 
12   26 
21.46961   99.07613 
12   26 
21.46959   99.07623 
12   26 
21.59403   97.32216 
12   26 
21.59405   97.32216 
12   26 
21.59403   97.32225 
12   26 
21.82898   92.28281 
12   26 
21.829   92.28281 
12   26 
21.82898   92.2829 
12   26 
22.48141   73.62694 
12   26 
22.48144   73.62694 
12   26 
22.48141   73.62701 
12   26 
23.13945   52.82481 
12   26 
23.13947   52.82481 
12   26 
23.13945   52.82486 
Fit Mean:  25.32385  Size:  -7.690916  Code:  1 
Try Mean:  19.78947  Size:  10 
12   26 
19.78947   10 
12   26 
19.78947   10 
12   26 
19.78949   10 
12   26 
19.78947   10.00001 
12   26 
19.79169   10.00009 
12   26 
19.79171   10.00009 
12   26 
19.79169   10.0001 
12   26 
23.35777   10.49814 
12   26 
23.35779   10.49814 
12   26 
23.35777   10.49815 
12   26 
24.68185   10.55847 
12   26 
24.68188   10.55847 
12   26 
24.68185   10.55848 
12   26 
25.67768   10.2407 
12   26 
25.6777   10.2407 
12   26 
25.67768   10.24071 
12   26 
26.99136   9.279648 
12   26 
26.99139   9.279648 
12   26 
26.99136   9.279658 
12   26 
35.73197   1.463011 
12   26 
28.53499   7.899199 
12   26 
28.53502   7.899199 
12   26 
28.53499   7.899207 
Fit Mean:  37.88162  Size:  -0.453697  Code:  1 
Try Mean:  19.78947  Size:  1 
12   26 
19.78947   1 
12   26 
19.78947   1 
12   26 
19.78949   1 
12   26 
19.78947   1.000001 
12   26 
19.79008   1.001698 
12   26 
19.7901   1.001698 
12   26 
19.79008   1.001699 
12   26 
132.7   172.4402 
12   26 
50.35143   47.40501 
12   26 
27.26004   12.34383 
12   26 
27.26006   12.34383 
12   26 
27.26004   12.34384 
12   26 
25.17868   9.31455 
12   26 
25.17871   9.31455 
12   26 
25.17868   9.314559 
12   26 
25.41823   9.473889 
12   26 
25.41825   9.473889 
12   26 
25.41823   9.473899 
12   26 
25.86446   9.425339 
12   26 
25.86449   9.425339 
12   26 
25.86446   9.425349 
12   26 
27.27806   8.582391 
12   26 
27.27809   8.582391 
12   26 
27.27806   8.582399 
12   26 
33.31867   3.641764 
12   26 
33.3187   3.641764 
12   26 
33.31867   3.641768 
12   26 
29.32925   7.138782 
12   26 
29.32928   7.138782 
12   26 
29.32925   7.13879 
12   26 
30.72879   6.130231 
12   26 
30.72882   6.130231 
12   26 
30.72879   6.130237 
12   26 
39.74703   0.2890668 
12   26 
31.63061   5.546115 
12   26 
31.63064   5.546115 
12   26 
31.63061   5.54612 
12   26 
34.5697   3.951093 
12   26 
32.99269   4.806925 
12   26 
32.99273   4.806925 
12   26 
32.99269   4.80693 
12   26 
33.78386   4.586301 
12   26 
33.78389   4.586301 
12   26 
33.78386   4.586306 
12   26 
36.94755   4.110539 
12   26 
36.94759   4.110539 
12   26 
36.94755   4.110543 
12   26 
40.63864   3.933628 
12   26 
40.63868   3.933628 
12   26 
40.63864   3.933632 
12   26 
45.69535   3.576966 
12   26 
45.69539   3.576966 
12   26 
45.69535   3.576969 
12   26 
51.99604   3.365485 
12   26 
51.9961   3.365485 
12   26 
51.99604   3.365489 
12   26 
61.52904   2.881724 
12   26 
61.5291   2.881724 
12   26 
61.52904   2.881727 
12   26 
67.45418   2.982084 
12   26 
67.45425   2.982084 
12   26 
67.45418   2.982087 
12   26 
77.88568   2.793297 
12   26 
77.88575   2.793297 
12   26 
77.88568   2.793299 
12   26 
94.72195   2.581682 
12   26 
94.72205   2.581682 
12   26 
94.72195   2.581685 
12   26 
106.2177   2.563746 
12   26 
106.2178   2.563746 
12   26 
106.2177   2.563748 
12   26 
128.0172   2.459674 
12   26 
128.0173   2.459674 
12   26 
128.0172   2.459676 
12   26 
152.3466   2.421764 
12   26 
152.3468   2.421764 
12   26 
152.3466   2.421766 
12   26 
190.4512   2.312098 
12   26 
190.4514   2.312098 
12   26 
190.4512   2.312101 
12   26 
224.6569   2.306423 
12   26 
224.6572   2.306423 
12   26 
224.6569   2.306425 
12   26 
277.5359   2.257965 
12   26 
277.5362   2.257965 
12   26 
277.5359   2.257967 
12   26 
343.0673   2.23865 
12   26 
343.0676   2.23865 
12   26 
343.0673   2.238652 
12   26 
430.8731   2.203435 
12   26 
430.8735   2.203435 
12   26 
430.8731   2.203438 
12   26 
545.5617   2.196577 
12   26 
545.5622   2.196577 
12   26 
545.5617   2.196579 
12   26 
705.9944   2.163946 
12   26 
705.9951   2.163946 
12   26 
705.9944   2.163949 
12   26 
885.6696   2.160401 
12   26 
885.6705   2.160401 
12   26 
885.6696   2.160404 
12   26 
1126.481   2.151172 
12   26 
1126.482   2.151172 
12   26 
1126.481   2.151175 
12   26 
1450.615   2.145083 
12   26 
1450.617   2.145083 
12   26 
1450.615   2.145085 
12   26 
1878.155   2.138513 
12   26 
1878.157   2.138513 
12   26 
1878.155   2.138515 
12   26 
2443.18   2.135438 
12   26 
2443.183   2.135438 
12   26 
2443.18   2.13544 
12   26 
3199.461   2.130062 
12   26 
3199.464   2.130062 
12   26 
3199.461   2.130065 
12   26 
4198.984   2.13019 
12   26 
4198.989   2.13019 
12   26 
4198.984   2.130192 
12   26 
5578.689   2.124323 
12   26 
5578.694   2.124323 
12   26 
5578.689   2.124325 
12   26 
7359.127   2.12576 
12   26 
7359.134   2.12576 
12   26 
7359.127   2.125762 
12   26 
9693.42   2.123269 
12   26 
9693.429   2.123269 
12   26 
9693.42   2.123271 
12   26 
12804.33   2.122825 
12   26 
12804.34   2.122825 
12   26 
12804.33   2.122827 
12   26 
16876.94   2.122128 
12   26 
16876.96   2.122128 
12   26 
16876.94   2.122131 
12   26 
22304.36   2.121696 
12   26 
22304.39   2.121696 
12   26 
22304.36   2.121698 
12   26 
29475.02   2.121335 
12   26 
29475.05   2.121335 
12   26 
29475.02   2.121337 
12   26 
38984.67   2.121073 
12   26 
38984.71   2.121073 
12   26 
38984.67   2.121076 
12   26 
51594.75   2.12087 
12   26 
51594.8   2.12087 
12   26 
51594.75   2.120872 
12   26 
68246.59   2.12072 
12   26 
68246.66   2.12072 
12   26 
68246.59   2.120722 
12   26 
88061.31   2.120616 
12   26 
88061.4   2.120616 
12   26 
88061.31   2.120618 
12   26 
107876   2.120552 
12   26 
107876.1   2.120552 
12   26 
107876   2.120555 
Fit Mean:  107876  Size:  2.120552  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  107876  Size:  2.120552  Code:  1  Try Size:  1 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
12 26
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
Fallback to calculating off an estimate of just variance = mu + mu^2/size
Mu estimate= 19.78947  Size estimate = 142.2905 
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 0
> print(nb_fit_mu);
[1] 0
> 
> print(m)
[1] 19.78947
> print(v)
[1] 22.54175
> print(D)
[1] 1.139078
> 
> print(deletion_propagation_coverage)
[1] 8
> 
> warnings()
> 
