
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | 3a-_BHI_c50_out/07_error_calibration/97.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | 3a-_BHI_c50_out/output/calibration/97.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.00315597 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 3 to 9.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  5.493333  Size:  10000 
3   9 
5.493333   10000 
3   9 
5.493333   10000 
3   9 
5.493339   10000 
3   9 
5.493333   10000.01 
3   9 
5.52102   10000 
3   9 
5.521026   10000 
3   9 
5.52102   10000.01 
3   9 
7.734127   10000 
3   9 
7.734135   10000 
3   9 
7.734127   10000.01 
3   9 
9.20449   10000 
3   9 
9.204499   10000 
3   9 
9.20449   10000.01 
3   9 
10.08831   10000 
3   9 
10.08832   10000 
3   9 
10.08831   10000.01 
3   9 
10.27576   10000 
3   9 
10.27577   10000 
3   9 
10.27576   10000.01 
3   9 
10.29623   10000 
3   9 
10.29624   10000 
3   9 
10.29623   10000.01 
3   9 
10.29668   10000 
3   9 
10.29669   10000 
3   9 
10.29668   10000.01 
3   9 
10.29668   10000 
3   9 
10.29669   10000 
3   9 
10.29668   10000.01 
Fit Mean:  10.29668  Size:  10000  Code:  2 
Try Mean:  5.493333  Size:  1000 
3   9 
5.493333   1000 
3   9 
5.493333   1000 
3   9 
5.493339   1000 
3   9 
5.493333   1000.001 
3   9 
5.521023   1000 
3   9 
5.521029   1000 
3   9 
5.521023   1000.001 
3   9 
7.730409   1000 
3   9 
7.730417   1000 
3   9 
7.730409   1000.001 
3   9 
9.195008   999.9999 
3   9 
9.195017   999.9999 
3   9 
9.195008   1000.001 
3   9 
10.09734   999.9999 
3   9 
10.09735   999.9999 
3   9 
10.09734   1000.001 
3   9 
10.29647   999.9999 
3   9 
10.29648   999.9999 
3   9 
10.29647   1000.001 
3   9 
10.31934   999.9999 
3   9 
10.31935   999.9999 
3   9 
10.31934   1000.001 
3   9 
10.31988   999.9999 
3   9 
10.31989   999.9999 
3   9 
10.31988   1000.001 
3   9 
10.31988   999.9999 
3   9 
10.31989   999.9999 
3   9 
10.31988   1000.001 
Fit Mean:  10.31988  Size:  999.9999  Code:  2 
Try Mean:  5.493333  Size:  100 
3   9 
5.493333   100 
3   9 
5.493333   100 
3   9 
5.493339   100 
3   9 
5.493333   100.0001 
3   9 
5.521001   99.99998 
3   9 
5.521006   99.99998 
3   9 
5.521001   100.0001 
3   9 
7.69955   99.99772 
3   9 
7.699558   99.99772 
3   9 
7.69955   99.99782 
3   9 
9.117548   99.99574 
3   9 
9.117557   99.99574 
3   9 
9.117548   99.99584 
3   9 
10.1778   99.99368 
3   9 
10.17781   99.99368 
3   9 
10.1778   99.99378 
3   9 
10.50139   99.992 
3   9 
10.5014   99.992 
3   9 
10.50139   99.9921 
3   9 
10.55803   99.99054 
3   9 
10.55804   99.99054 
3   9 
10.55803   99.99064 
3   9 
10.56084   99.9893 
3   9 
10.56085   99.9893 
3   9 
10.56084   99.9894 
3   9 
10.56314   99.98617 
3   9 
10.56315   99.98617 
3   9 
10.56314   99.98627 
3   9 
10.5682   99.9726 
3   9 
10.56821   99.9726 
3   9 
10.5682   99.9727 
3   9 
10.57563   99.93629 
3   9 
10.57564   99.93629 
3   9 
10.57563   99.93639 
3   9 
10.58833   99.83047 
3   9 
10.58834   99.83047 
3   9 
10.58833   99.83057 
3   9 
10.60909   99.54533 
3   9 
10.6091   99.54533 
3   9 
10.60909   99.54543 
3   9 
10.64464   98.76724 
3   9 
10.64465   98.76724 
3   9 
10.64464   98.76734 
3   9 
10.70863   96.62766 
3   9 
10.70865   96.62766 
3   9 
10.70863   96.62776 
3   9 
10.84347   90.23228 
3   9 
10.84348   90.23228 
3   9 
10.84347   90.23237 
3   9 
11.38282   59.08856 
3   9 
11.38283   59.08856 
3   9 
11.38282   59.08861 
Fit Mean:  13.28612  Size:  -47.84075  Code:  1 
Try Mean:  5.493333  Size:  10 
3   9 
5.493333   10 
3   9 
5.493333   10 
3   9 
5.493339   10 
3   9 
5.493333   10.00001 
3   9 
5.518605   9.999702 
3   9 
5.51861   9.999702 
3   9 
5.518605   9.999712 
3   9 
7.657656   10.01219 
3   9 
7.657663   10.01219 
3   9 
7.657656   10.0122 
3   9 
9.053605   10.05255 
3   9 
9.053614   10.05255 
3   9 
9.053605   10.05256 
3   9 
10.80289   10.1156 
3   9 
10.8029   10.1156 
3   9 
10.80289   10.11561 
3   9 
12.22375   10.15209 
3   9 
12.22376   10.15209 
3   9 
12.22375   10.1521 
3   9 
13.31192   10.14164 
3   9 
13.31194   10.14164 
3   9 
13.31192   10.14165 
3   9 
13.95   10.08323 
3   9 
13.95002   10.08323 
3   9 
13.95   10.08324 
3   9 
14.34245   9.983127 
3   9 
14.34247   9.983127 
3   9 
14.34245   9.983137 
3   9 
14.94486   9.71558 
3   9 
14.94488   9.71558 
3   9 
14.94486   9.71559 
3   9 
16.76731   8.647539 
3   9 
16.76733   8.647539 
3   9 
16.76731   8.647548 
3   9 
18.81751   7.391662 
3   9 
18.81753   7.391662 
3   9 
18.81751   7.391669 
3   9 
22.52537   5.262677 
3   9 
22.5254   5.262677 
3   9 
22.52537   5.262683 
3   9 
27.25314   2.699167 
3   9 
24.08009   4.419675 
3   9 
24.08011   4.419675 
3   9 
24.08009   4.419679 
3   9 
25.7781   3.602403 
3   9 
24.88497   4.032277 
3   9 
24.88499   4.032277 
3   9 
24.88497   4.032281 
3   9 
25.13625   3.98269 
3   9 
25.13628   3.98269 
3   9 
25.13625   3.982694 
3   9 
28.10269   3.633069 
3   9 
28.10272   3.633069 
3   9 
28.10269   3.633072 
3   9 
31.32578   3.493239 
3   9 
31.32581   3.493239 
3   9 
31.32578   3.493243 
3   9 
38.24288   3.475675 
3   9 
38.24292   3.475675 
3   9 
38.24288   3.475679 
3   9 
46.23126   3.352117 
3   9 
46.23131   3.352117 
3   9 
46.23126   3.352121 
3   9 
58.17323   3.19212 
3   9 
58.17328   3.19212 
3   9 
58.17323   3.192123 
3   9 
72.83642   3.138503 
3   9 
72.8365   3.138503 
3   9 
72.83642   3.138506 
3   9 
93.22072   3.004432 
3   9 
93.22081   3.004432 
3   9 
93.22072   3.004435 
3   9 
120.3986   3.023477 
3   9 
120.3988   3.023477 
3   9 
120.3986   3.023481 
3   9 
157.5509   2.907249 
3   9 
157.551   2.907249 
3   9 
157.5509   2.907251 
3   9 
198.1787   2.891582 
3   9 
198.1789   2.891582 
3   9 
198.1787   2.891585 
3   9 
255.0815   2.883244 
3   9 
255.0817   2.883244 
3   9 
255.0815   2.883247 
3   9 
331.308   2.860779 
3   9 
331.3083   2.860779 
3   9 
331.308   2.860782 
3   9 
432.3183   2.851051 
3   9 
432.3187   2.851051 
3   9 
432.3183   2.851054 
3   9 
566.0873   2.837117 
3   9 
566.0879   2.837117 
3   9 
566.0873   2.83712 
3   9 
743.1413   2.83238 
3   9 
743.142   2.83238 
3   9 
743.1413   2.832383 
3   9 
978.3605   2.82258 
3   9 
978.3615   2.82258 
3   9 
978.3605   2.822583 
3   9 
1289.516   2.821841 
3   9 
1289.517   2.821841 
3   9 
1289.516   2.821844 
3   9 
1704.517   2.813806 
3   9 
1704.519   2.813806 
3   9 
1704.517   2.813808 
3   9 
2253.994   2.815732 
3   9 
2253.996   2.815732 
3   9 
2253.994   2.815735 
3   9 
2987.653   2.809183 
3   9 
2987.656   2.809183 
3   9 
2987.653   2.809185 
3   9 
3957.207   2.811286 
3   9 
3957.211   2.811286 
3   9 
3957.207   2.811289 
3   9 
5241.459   2.807602 
3   9 
5241.465   2.807602 
3   9 
5241.459   2.807605 
3   9 
6940.843   2.808282 
3   9 
6940.85   2.808282 
3   9 
6940.843   2.808284 
3   9 
9187.137   2.806782 
3   9 
9187.146   2.806782 
3   9 
9187.137   2.806785 
3   9 
12165.39   2.806778 
3   9 
12165.41   2.806778 
3   9 
12165.39   2.806781 
3   9 
16107.4   2.806157 
3   9 
16107.42   2.806157 
3   9 
16107.4   2.806159 
3   9 
21330.51   2.806028 
3   9 
21330.53   2.806028 
3   9 
21330.51   2.806031 
3   9 
28247.41   2.805743 
3   9 
28247.43   2.805743 
3   9 
28247.41   2.805746 
3   9 
37419.99   2.805632 
3   9 
37420.03   2.805632 
3   9 
37419.99   2.805635 
3   9 
48829.5   2.805499 
3   9 
48829.54   2.805499 
3   9 
48829.5   2.805502 
3   9 
60239   2.805441 
3   9 
60239.06   2.805441 
3   9 
60239   2.805444 
3   9 
71648.5   2.805395 
3   9 
71648.57   2.805395 
3   9 
71648.5   2.805397 
3   9 
83058   2.805362 
3   9 
83058.08   2.805362 
3   9 
83058   2.805365 
3   9 
94467.5   2.805337 
3   9 
94467.59   2.805337 
3   9 
94467.5   2.80534 
Fit Mean:  94467.5  Size:  2.805337  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  94467.5  Size:  2.805337  Code:  1  Try Size:  10 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
3 9
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
Fallback to calculating off an estimate of just variance = mu + mu^2/size
Mu estimate= 18.63971  Size estimate = 1.138922 
Double fallback to calculating as just 10% of the mean
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 0
> print(nb_fit_mu);
[1] 0
> 
> print(m)
[1] 18.63971
> print(v)
[1] 323.6989
> print(D)
[1] 17.36609
> 
> print(deletion_propagation_coverage)
[1] 1.863971
> 
> warnings()
> 
