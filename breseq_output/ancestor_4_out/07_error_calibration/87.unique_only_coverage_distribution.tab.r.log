
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##
> ##
> ## AUTHORS
> ##
> ## Jeffrey E. Barrick <jeffrey.e.barrick@gmail.com>
> ##
> ## LICENSE AND COPYRIGHT
> ##
> ## Copyright (c) 2008-2010 Michigan State University
> ## Copyright (c) 2011-2022 The University of Texas at Austin
> ##
> ## breseq is free software; you can redistribute it and/or modify it under the
> ## terms the GNU General Public License as published by the Free Software
> ## Foundation; either version 1, or (at your option) any later version.
> ##
> ##
> 
> ## Arguments:
> ##   distribution_file=/path/to/input 
> ##   plot_file=/path/to/output 
> ##   deletion_propagation_pr_cutoff=float
> ##   plot_poisson=0 or 1
> ##   pdf_output=0 or 1
> 
> ## Returns these values printed out to output log
> ## 
> ##  1. print(nb_fit_size); # 0 if fit failed
> ##  2. print(nb_fit_mu);   # 0 if fit failed
> ##  3. print(m)q
> ##  4. print(v)
> ##  5. print(D)
> ##  6. print(deletion_propagation_coverage)
> ##     -1 if it was <1 after fitting (implying reference sequence is deleted)
> ##
> 
> plot_poisson = 0;
> pdf_output = 1;
> 
> this.print.level = 0
> #this.print.level = 2
> 
> for (e in commandArgs(TRUE)) {
+   ta = strsplit(e,"=",fixed=TRUE)[[1]]
+   if(length(ta)>1) {
+     temp = ta[2]
+     assign(ta[1],temp)
+     cat("assigned ",ta[1]," the value of |",temp,"|\n")
+   } else {
+     assign(ta[[1]][1],TRUE)
+     cat("assigned ",ta[1]," the value of TRUE\n")
+   }
+ }
assigned  distribution_file  the value of | p4_out/07_error_calibration/87.unique_only_coverage_distribution.tab |
assigned  plot_file  the value of | p4_out/output/calibration/87.unique_coverage.pdf |
assigned  deletion_propagation_pr_cutoff  the value of | 0.00408248 |
> 
> deletion_propagation_pr_cutoff = as.numeric(deletion_propagation_pr_cutoff);
> 
> ## initialize values to be filled in
> nb_fit_mu = 0
> nb_fit_size = 0
> m = 0
> v = 0
> D = 0
> deletion_propagation_coverage = -1
> 
> min_fraction_included_in_nb_fit = 0.01
> 
> #load data
> X<-read.table(distribution_file, header=T)
> 
> #table might be empty
> if (nrow(X) == 0)
+ {
+   #print out statistics
+   
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> #create the distribution vector and fit
> Y<-rep(X$coverage, X$n)
> m<-mean(Y)
> v<-var(Y)
> D<-v/m
> 
> ###
> ## Smooth the distribution with a moving average window of size 5
> ## so that we can more reliably find it's maximum value
> ###
> 
> ma5 = c(1, 1, 1, 1, 1)/5;
> 
> ## filtering fails if there are too few points
> if (nrow(X) >= 5) {
+   X$ma = filter(X$n, ma5)
+ } else {
+ 	X$ma = X$n
+ }
> 
> i<-0
> max_n <- 0;
> min_i <- max( trunc(m/4), 1 ); #prevents zero for pathological distributions
> max_i <- i;
> for (i in min_i:length(X$ma))
+ {		
+   #cat(i, "\n")
+ 	if (!is.na(X$ma[i]) && (X$ma[i] > max_n))
+ 	{
+ 		max_n = X$ma[i];
+ 		max_i = i;
+ 	}
+ }
> 
> ##
> # Censor data on the right and left of the maximum
> ##
> 
> start_i = max(floor(max_i*0.5), 1);
> end_i = min(ceiling(max_i*1.5), length(X$ma));
> 
> if (start_i == end_i)
+ {
+   print(nb_fit_size);
+   print(nb_fit_mu);
+   
+   print(m)
+   print(v)
+   print(D)
+   
+   print(deletion_propagation_coverage)
+   
+   q()
+ }
> 
> cat("Fitting from coverage of ", start_i, " to ", end_i, ".\n", sep="")
Fitting from coverage of 8 to 19.
> 
> ##
> # Coarse grain so that we are only fitting a number of bins that is 1000-2000
> #
> # The later adjustment for doing the fits this way is to multiply the means
> # of the negative binomial and poisson distributions by the binning number.
> # (The size parameter of the negative binomial doesn't need to be adjusted.)
> ##
> 
> 
> num_per_bin = trunc((end_i - start_i) / 1000)
> 
> if (num_per_bin > 1) 
+ {
+   cat("Coarse-graining for fits\n")
+   start_i_for_fits = trunc(start_i/num_per_bin)
+   end_i_for_fits = ceiling(end_i/num_per_bin)
+   num_bins = end_i - start_i  + 1
+   cat("Fitting from coverage in adjusted bins ", start_i_for_fits, " to ", end_i_for_fits, ".\n", sep="")
+   cat("Number of bins ", num_bins, ". Each bin has ", num_per_bin, " coverage values.\n", sep="")
+ 
+   # Create a new vector where we've added together values in bins
+   X.for.fits = vector("double", end_i_for_fits)
+   for (i in start_i_for_fits:end_i_for_fits)
+   {
+     for (j in 1:num_per_bin)
+     {
+       if (i*num_per_bin+j <= length(X$n))
+       {
+         X.for.fits[i] = X.for.fits[i] + X$n[i*num_per_bin+j]
+       }
+     }
+   }
+ 
+ } else {
+   ## AVOID num_per_bin equalling zero!!
+   X.for.fits = X$n[1:end_i]
+   num_per_bin = 1
+   start_i_for_fits = start_i
+   end_i_for_fits = end_i
+ }
> 
> 
> ##
> # Now perform negative binomial fitting to the censored data
> ##
> 
> inner_total<-0;
> for (i in start_i_for_fits:end_i_for_fits)
+ {
+ 	inner_total = inner_total + X.for.fits[i]; 
+ }
> # Yes: it's correct to use X here because we want the overall total total
> total_total<-sum(X$n);
> 
> ## let's preconstruct these for speed
> dist = vector("double", end_i_for_fits)
> 
> f_nb <- function(par) {
+ 
+ 	mu = par[1];
+ 	size = par[2];
+ 
+   if ((mu <= 0) || (size <= 0))
+   {
+     return(0);
+   }
+   
+   cat(start_i_for_fits, " ", end_i_for_fits, "\n");
+   cat(mu, " ", size, "\n");
+   
+ 	dist<-c()
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+ 		dist[i] <- dnbinom(i, size=size, mu=mu);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (mu, size)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> 
> ## Fit negative binomial 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> nb_fit = NULL
> ## as.numeric prevents overflow in sums involving integers
> mean_estimate = sum((as.numeric(1:end_i_for_fits)*as.numeric(X.for.fits)))/sum(as.numeric(X.for.fits))
> 
> nb_fit_mu = -1
> nb_fit_size = -1
> try_size = 100000
> try_means_index = 1
> #This is a list of different means to test <-  sometimes the actual mean doesn't lead to a fit
> try_means = c(mean_estimate, 
+               end_i_for_fits, 
+               start_i_for_fits, 
+               1*(end_i_for_fits + start_i_for_fits)/4,
+               2*(end_i_for_fits + start_i_for_fits)/4,
+               3*(end_i_for_fits + start_i_for_fits)/4
+               )
>               
>               
> nb_fit = c()
> 
> while ( ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1)) && (try_size > 0.001) && (try_means_index <= length(try_means)))
+ {
+   try_size = try_size / 10
+   try_mean = try_means[try_means_index]
+ 
+   ## SIZE ESTIMATE from the censored data can be negative, so try various values instead
+   cat("Try Mean: ", try_mean, " Size: ", try_size, "\n")
+ 
+   try( suppressWarnings(nb_fit<-nlm(f_nb, c(try_mean, try_size), iterlim=1000, print.level=this.print.level)) )
+ 
+   nb_fit_mu = nb_fit$estimate[1];
+   nb_fit_size = nb_fit$estimate[2];
+ 
+   cat("Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, "\n")
+   
+   if (try_size <= 0.001) {
+     try_size = 100000
+     try_means_index = try_means_index + 1
+   }
+ }
Try Mean:  17.92771  Size:  10000 
8   19 
17.92771   10000 
8   19 
17.92771   10000 
8   19 
17.92773   10000 
8   19 
17.92771   10000.01 
8   19 
17.9575   10000 
8   19 
17.95752   10000 
8   19 
17.9575   10000.01 
8   19 
34.72683   10000 
8   19 
34.72686   10000 
8   19 
34.72683   10000.01 
8   19 
38.75905   10000 
8   19 
38.75909   10000 
8   19 
38.75905   10000.01 
8   19 
46.52042   10000 
8   19 
46.52047   10000 
8   19 
46.52042   10000.01 
8   19 
52.40229   10000 
8   19 
52.40234   10000 
8   19 
52.40229   10000.01 
8   19 
57.70592   10000 
8   19 
57.70598   10000 
8   19 
57.70592   10000.01 
8   19 
61.09265   10000 
8   19 
61.09271   10000 
8   19 
61.09265   10000.01 
8   19 
62.64081   10000 
8   19 
62.64087   10000 
8   19 
62.64081   10000.01 
8   19 
63.00486   10000 
8   19 
63.00493   10000 
8   19 
63.00486   10000.01 
8   19 
63.03568   10000 
8   19 
63.03574   10000 
8   19 
63.03568   10000.01 
8   19 
63.03619   10000 
8   19 
63.03626   10000 
8   19 
63.03619   10000.01 
8   19 
63.03619   10000 
8   19 
63.03626   10000 
8   19 
63.03619   10000.01 
Fit Mean:  63.03619  Size:  10000  Code:  2 
Try Mean:  17.92771  Size:  1000 
8   19 
17.92771   1000 
8   19 
17.92771   1000 
8   19 
17.92773   1000 
8   19 
17.92771   1000.001 
8   19 
17.95713   1000 
8   19 
17.95715   1000 
8   19 
17.95713   1000.001 
8   19 
34.58094   1000.005 
8   19 
34.58097   1000.005 
8   19 
34.58094   1000.006 
8   19 
38.76522   1000.009 
8   19 
38.76526   1000.009 
8   19 
38.76522   1000.01 
8   19 
46.7666   1000.017 
8   19 
46.76664   1000.017 
8   19 
46.7666   1000.018 
8   19 
53.02531   1000.024 
8   19 
53.02536   1000.024 
8   19 
53.02531   1000.025 
8   19 
58.89582   1000.031 
8   19 
58.89588   1000.031 
8   19 
58.89582   1000.032 
8   19 
62.93311   1000.037 
8   19 
62.93318   1000.037 
8   19 
62.93311   1000.038 
8   19 
65.0223   1000.039 
8   19 
65.02236   1000.039 
8   19 
65.0223   1000.04 
8   19 
65.62656   1000.04 
8   19 
65.62663   1000.04 
8   19 
65.62656   1000.041 
8   19 
65.69741   1000.04 
8   19 
65.69748   1000.04 
8   19 
65.69741   1000.041 
8   19 
65.6994   1000.04 
8   19 
65.69946   1000.04 
8   19 
65.6994   1000.041 
8   19 
65.6994   1000.04 
8   19 
65.69947   1000.04 
8   19 
65.6994   1000.041 
Fit Mean:  65.6994  Size:  1000.04  Code:  2 
Try Mean:  17.92771  Size:  100 
8   19 
17.92771   100 
8   19 
17.92771   100 
8   19 
17.92773   100 
8   19 
17.92771   100.0001 
8   19 
17.95386   100.0001 
8   19 
17.95388   100.0001 
8   19 
17.95386   100.0002 
8   19 
33.39737   100.3911 
8   19 
33.39741   100.3911 
8   19 
33.39737   100.3912 
8   19 
38.78   100.7548 
8   19 
38.78004   100.7548 
8   19 
38.78   100.7549 
8   19 
48.52794   101.5846 
8   19 
48.52799   101.5846 
8   19 
48.52794   101.5848 
8   19 
57.78106   102.5028 
8   19 
57.78112   102.5028 
8   19 
57.78106   102.5029 
8   19 
68.52418   103.659 
8   19 
68.52425   103.659 
8   19 
68.52418   103.6592 
8   19 
79.37484   104.8839 
8   19 
79.37492   104.8839 
8   19 
79.37484   104.884 
8   19 
89.82727   106.0949 
8   19 
89.82736   106.0949 
8   19 
89.82727   106.095 
8   19 
98.46991   107.1096 
8   19 
98.47001   107.1096 
8   19 
98.46991   107.1098 
8   19 
104.1302   107.778 
8   19 
104.1303   107.778 
8   19 
104.1302   107.7781 
8   19 
106.5903   108.0686 
8   19 
106.5904   108.0686 
8   19 
106.5903   108.0687 
8   19 
107.1348   108.1322 
8   19 
107.1349   108.1322 
8   19 
107.1348   108.1324 
8   19 
107.1766   108.1364 
8   19 
107.1767   108.1364 
8   19 
107.1766   108.1365 
8   19 
107.1821   108.1362 
8   19 
107.1822   108.1362 
8   19 
107.1821   108.1363 
8   19 
107.2316   108.1277 
8   19 
107.2317   108.1277 
8   19 
107.2316   108.1278 
8   19 
107.2971   108.1041 
8   19 
107.2972   108.1041 
8   19 
107.2971   108.1042 
8   19 
107.4505   108.0185 
8   19 
107.4506   108.0185 
8   19 
107.4505   108.0186 
8   19 
107.7631   107.7815 
8   19 
107.7632   107.7815 
8   19 
107.7631   107.7816 
8   19 
108.5193   107.0805 
8   19 
108.5194   107.0805 
8   19 
108.5193   107.0806 
8   19 
110.7649   104.7436 
8   19 
110.765   104.7436 
8   19 
110.7649   104.7437 
8   19 
181.815   29.22863 
8   19 
117.8699   97.19209 
8   19 
117.87   97.19209 
8   19 
117.8699   97.19219 
Fit Mean:  282.864  Size:  -78.02514  Code:  1 
Try Mean:  17.92771  Size:  10 
8   19 
17.92771   10 
8   19 
17.92771   10 
8   19 
17.92773   10 
8   19 
17.92771   10.00001 
8   19 
17.94054   10.00299 
8   19 
17.94055   10.00299 
8   19 
17.94054   10.003 
8   19 
48.79652   35.5807 
8   19 
48.79657   35.5807 
8   19 
48.79652   35.58073 
8   19 
59.8202   46.07791 
8   19 
59.82026   46.07791 
8   19 
59.8202   46.07796 
8   19 
74.59679   60.21999 
8   19 
74.59687   60.21999 
8   19 
74.59679   60.22005 
8   19 
87.57915   72.66725 
8   19 
87.57924   72.66725 
8   19 
87.57915   72.66732 
8   19 
99.48251   84.08596 
8   19 
99.48261   84.08596 
8   19 
99.48251   84.08604 
8   19 
108.1564   92.40775 
8   19 
108.1566   92.40775 
8   19 
108.1564   92.40784 
8   19 
112.9397   96.99648 
8   19 
112.9399   96.99648 
8   19 
112.9397   96.99657 
8   19 
114.5036   98.496 
8   19 
114.5037   98.496 
8   19 
114.5036   98.4961 
8   19 
114.7253   98.70794 
8   19 
114.7254   98.70794 
8   19 
114.7253   98.70804 
8   19 
114.7343   98.71577 
8   19 
114.7344   98.71577 
8   19 
114.7343   98.71587 
8   19 
114.741   98.72055 
8   19 
114.7411   98.72055 
8   19 
114.741   98.72065 
8   19 
114.7594   98.73001 
8   19 
114.7596   98.73001 
8   19 
114.7594   98.73011 
8   19 
114.7904   98.73825 
8   19 
114.7905   98.73825 
8   19 
114.7904   98.73835 
8   19 
114.8566   98.73847 
8   19 
114.8567   98.73847 
8   19 
114.8566   98.73857 
8   19 
114.9965   98.70297 
8   19 
114.9966   98.70297 
8   19 
114.9965   98.70307 
8   19 
115.3184   98.54992 
8   19 
115.3185   98.54992 
8   19 
115.3184   98.55002 
8   19 
116.1091   98.03956 
8   19 
116.1093   98.03956 
8   19 
116.1091   98.03966 
8   19 
118.4408   96.28107 
8   19 
118.4409   96.28107 
8   19 
118.4408   96.28117 
8   19 
142.9215   77.0078 
8   19 
142.9216   77.0078 
8   19 
142.9215   77.00788 
8   19 
121.5439   93.77712 
8   19 
132.8415   84.91491 
8   19 
132.8416   84.91491 
8   19 
132.8415   84.915 
8   19 
135.2132   83.14829 
8   19 
135.2133   83.14829 
8   19 
135.2132   83.14837 
8   19 
140.6488   79.27713 
8   19 
140.649   79.27713 
8   19 
140.6488   79.27721 
8   19 
138.0532   81.24424 
8   19 
138.0533   81.24424 
8   19 
138.0532   81.24432 
8   19 
138.7078   80.91361 
8   19 
138.708   80.91361 
8   19 
138.7078   80.91369 
8   19 
154.5082   73.55059 
8   19 
154.5083   73.55059 
8   19 
154.5082   73.55066 
8   19 
150.1151   76.45909 
8   19 
150.1153   76.45909 
8   19 
150.1151   76.45917 
8   19 
155.3236   74.74909 
8   19 
155.3237   74.74909 
8   19 
155.3236   74.74916 
8   19 
186.6423   64.26285 
8   19 
161.6725   72.62332 
8   19 
161.6727   72.62332 
8   19 
161.6725   72.62339 
8   19 
185.6374   65.52755 
8   19 
170.0498   70.14288 
8   19 
170.05   70.14288 
8   19 
170.0498   70.14295 
8   19 
182.8611   67.19683 
8   19 
182.8612   67.19683 
8   19 
182.8611   67.1969 
8   19 
193.9729   65.82453 
8   19 
193.9731   65.82453 
8   19 
193.9729   65.8246 
8   19 
218.9764   61.54305 
8   19 
218.9766   61.54305 
8   19 
218.9764   61.54311 
8   19 
216.1829   62.93165 
8   19 
216.1831   62.93165 
8   19 
216.1829   62.93171 
8   19 
229.9613   61.37468 
8   19 
229.9615   61.37468 
8   19 
229.9613   61.37474 
8   19 
299.5813   53.87939 
8   19 
239.1979   60.38026 
8   19 
239.1982   60.38026 
8   19 
239.1979   60.38032 
8   19 
283.7673   56.19312 
8   19 
257.3219   58.67757 
8   19 
257.3222   58.67757 
8   19 
257.3219   58.67763 
8   19 
277.5096   57.26443 
8   19 
277.5099   57.26443 
8   19 
277.5096   57.26448 
8   19 
301.1424   56.32007 
8   19 
301.1427   56.32007 
8   19 
301.1424   56.32012 
8   19 
345.1383   54.00201 
8   19 
345.1386   54.00201 
8   19 
345.1383   54.00206 
8   19 
350.4412   54.36882 
8   19 
350.4416   54.36882 
8   19 
350.4412   54.36887 
8   19 
388.3148   53.19123 
8   19 
388.3152   53.19123 
8   19 
388.3148   53.19129 
8   19 
468.0438   50.96966 
8   19 
468.0442   50.96966 
8   19 
468.0438   50.96971 
8   19 
449.8054   51.91679 
8   19 
449.8059   51.91679 
8   19 
449.8054   51.91685 
8   19 
481.3688   51.36721 
8   19 
481.3693   51.36721 
8   19 
481.3688   51.36726 
8   19 
633.6424   48.79206 
8   19 
536.8492   50.42896 
8   19 
536.8497   50.42896 
8   19 
536.8492   50.42901 
8   19 
610.8214   49.49912 
8   19 
610.822   49.49912 
8   19 
610.8214   49.49917 
8   19 
656.3444   49.31213 
8   19 
656.3451   49.31213 
8   19 
656.3444   49.31218 
8   19 
763.8498   48.5018 
8   19 
763.8505   48.5018 
8   19 
763.8498   48.50185 
8   19 
860.5789   48.13768 
8   19 
860.5798   48.13768 
8   19 
860.5789   48.13773 
8   19 
1009.811   47.46363 
8   19 
1009.812   47.46363 
8   19 
1009.811   47.46368 
8   19 
1167.414   47.22312 
8   19 
1167.415   47.22312 
8   19 
1167.414   47.22317 
8   19 
1420.769   46.53657 
8   19 
1420.77   46.53657 
8   19 
1420.769   46.53662 
8   19 
1481.548   46.62047 
8   19 
1481.55   46.62047 
8   19 
1481.548   46.62052 
8   19 
1747.319   46.32332 
8   19 
1747.321   46.32332 
8   19 
1747.319   46.32337 
8   19 
2115.46   45.97048 
8   19 
2115.462   45.97048 
8   19 
2115.46   45.97053 
8   19 
2481.022   45.82798 
8   19 
2481.025   45.82798 
8   19 
2481.022   45.82802 
8   19 
2992.585   45.58919 
8   19 
2992.588   45.58919 
8   19 
2992.585   45.58923 
8   19 
3649.824   45.50023 
8   19 
3649.827   45.50023 
8   19 
3649.824   45.50028 
8   19 
4692.297   45.19893 
8   19 
4692.302   45.19893 
8   19 
4692.297   45.19897 
8   19 
5062.313   45.23511 
8   19 
5062.318   45.23511 
8   19 
5062.313   45.23515 
8   19 
6253.316   45.14597 
8   19 
6253.322   45.14597 
8   19 
6253.316   45.14601 
8   19 
7743.077   45.04933 
8   19 
7743.085   45.04933 
8   19 
7743.077   45.04937 
8   19 
9664.238   44.99665 
8   19 
9664.248   44.99665 
8   19 
9664.238   44.9967 
8   19 
12148.59   44.92634 
8   19 
12148.6   44.92634 
8   19 
12148.59   44.92638 
8   19 
15460.79   44.90751 
8   19 
15460.8   44.90751 
8   19 
15460.79   44.90755 
8   19 
20389.61   44.82223 
8   19 
20389.63   44.82223 
8   19 
20389.61   44.82227 
8   19 
24963.18   44.82106 
8   19 
24963.2   44.82106 
8   19 
24963.18   44.8211 
8   19 
31838.11   44.80273 
8   19 
31838.14   44.80273 
8   19 
31838.11   44.80278 
8   19 
40870.08   44.78704 
8   19 
40870.12   44.78704 
8   19 
40870.08   44.78708 
8   19 
53057.75   44.77353 
8   19 
53057.8   44.77353 
8   19 
53057.75   44.77358 
8   19 
68696.88   44.76427 
8   19 
68696.95   44.76427 
8   19 
68696.88   44.76432 
8   19 
89224.98   44.75506 
8   19 
89225.07   44.75506 
8   19 
89224.98   44.7551 
8   19 
109753.1   44.75191 
8   19 
109753.2   44.75191 
8   19 
109753.1   44.75196 
8   19 
130281.2   44.74713 
8   19 
130281.3   44.74713 
8   19 
130281.2   44.74718 
8   19 
150809.3   44.74594 
8   19 
150809.4   44.74594 
8   19 
150809.3   44.74598 
8   19 
171337.4   44.7433 
8   19 
171337.5   44.7433 
8   19 
171337.4   44.74335 
Fit Mean:  171337.4  Size:  44.7433  Code:  5 
Try Mean:  17.92771  Size:  1 
8   19 
17.92771   1 
8   19 
17.92771   1 
8   19 
17.92773   1 
8   19 
17.92771   1.000001 
8   19 
17.92995   1.01301 
8   19 
17.92997   1.01301 
8   19 
17.92995   1.013011 
8   19 
25.26155   10.97561 
8   19 
25.26158   10.97561 
8   19 
25.26155   10.97562 
8   19 
73.70354   66.63573 
8   19 
73.70361   66.63573 
8   19 
73.70354   66.6358 
8   19 
77.64171   71.14962 
8   19 
77.64179   71.14962 
8   19 
77.64171   71.14969 
8   19 
92.384   88.04714 
8   19 
92.3841   88.04714 
8   19 
92.384   88.04723 
8   19 
100.2649   97.08003 
8   19 
100.265   97.08003 
8   19 
100.2649   97.08012 
8   19 
105.8849   103.5214 
8   19 
105.885   103.5214 
8   19 
105.8849   103.5215 
8   19 
107.9111   105.8436 
8   19 
107.9112   105.8436 
8   19 
107.9111   105.8437 
8   19 
108.2965   106.285 
8   19 
108.2966   106.285 
8   19 
108.2965   106.2851 
8   19 
108.3181   106.3096 
8   19 
108.3182   106.3096 
8   19 
108.3181   106.3097 
8   19 
108.3189   106.3103 
8   19 
108.319   106.3103 
8   19 
108.3189   106.3104 
8   19 
108.3385   106.3233 
8   19 
108.3386   106.3233 
8   19 
108.3385   106.3234 
8   19 
108.3628   106.3316 
8   19 
108.3629   106.3316 
8   19 
108.3628   106.3317 
8   19 
108.422   106.3322 
8   19 
108.4221   106.3322 
8   19 
108.422   106.3323 
8   19 
108.5407   106.294 
8   19 
108.5408   106.294 
8   19 
108.5407   106.2941 
8   19 
108.8175   106.1255 
8   19 
108.8176   106.1255 
8   19 
108.8175   106.1256 
8   19 
109.4888   105.567 
8   19 
109.4889   105.567 
8   19 
109.4888   105.5671 
8   19 
111.4455   103.6558 
8   19 
111.4456   103.6558 
8   19 
111.4455   103.6559 
8   19 
128.8696   85.80294 
8   19 
128.8697   85.80294 
8   19 
128.8696   85.80303 
8   19 
120.4264   94.49963 
8   19 
127.0269   87.70096 
8   19 
127.027   87.70096 
8   19 
127.0269   87.70105 
8   19 
128.0454   86.83828 
8   19 
128.0455   86.83828 
8   19 
128.0454   86.83837 
8   19 
131.6726   84.08677 
8   19 
131.6727   84.08677 
8   19 
131.6726   84.08685 
8   19 
133.199   83.29494 
8   19 
133.1991   83.29494 
8   19 
133.199   83.29502 
8   19 
143.1653   79.1386 
8   19 
143.1654   79.1386 
8   19 
143.1653   79.13868 
8   19 
156.8347   72.74689 
8   19 
156.8348   72.74689 
8   19 
156.8347   72.74697 
8   19 
157.4374   74.36491 
8   19 
157.4376   74.36491 
8   19 
157.4374   74.36499 
8   19 
167.5295   71.22523 
8   19 
167.5297   71.22523 
8   19 
167.5295   71.2253 
8   19 
211.2804   58.73823 
8   19 
171.9046   69.97653 
8   19 
171.9048   69.97653 
8   19 
171.9046   69.9766 
8   19 
190.8507   65.29373 
8   19 
190.8509   65.29373 
8   19 
190.8507   65.2938 
8   19 
184.9934   67.31983 
8   19 
184.9936   67.31983 
8   19 
184.9934   67.3199 
8   19 
191.4948   66.2947 
8   19 
191.495   66.2947 
8   19 
191.4948   66.29477 
8   19 
226.9791   60.30463 
8   19 
207.3264   63.62218 
8   19 
207.3267   63.62218 
8   19 
207.3264   63.62224 
8   19 
226.3808   61.05822 
8   19 
226.381   61.05822 
8   19 
226.3808   61.05829 
8   19 
236.3876   60.62925 
8   19 
236.3878   60.62925 
8   19 
236.3876   60.62931 
8   19 
265.3595   58.01538 
8   19 
265.3598   58.01538 
8   19 
265.3595   58.01544 
8   19 
281.8964   57.2352 
8   19 
281.8967   57.2352 
8   19 
281.8964   57.23526 
8   19 
318.5799   55.12146 
8   19 
318.5802   55.12146 
8   19 
318.5799   55.12151 
8   19 
348.7143   54.55038 
8   19 
348.7147   54.55038 
8   19 
348.7143   54.55043 
8   19 
414.2977   51.96999 
8   19 
414.2981   51.96999 
8   19 
414.2977   51.97004 
8   19 
388.8085   53.27777 
8   19 
388.8089   53.27777 
8   19 
388.8085   53.27782 
8   19 
410.9964   52.69129 
8   19 
410.9968   52.69129 
8   19 
410.9964   52.69134 
8   19 
532.4815   49.71508 
8   19 
451.2345   51.70551 
8   19 
451.2349   51.70551 
8   19 
451.2345   51.70557 
8   19 
505.7711   50.66135 
8   19 
505.7716   50.66135 
8   19 
505.7711   50.6614 
8   19 
535.1926   50.4632 
8   19 
535.1932   50.4632 
8   19 
535.1926   50.46325 
8   19 
613.8707   49.58793 
8   19 
613.8713   49.58793 
8   19 
613.8707   49.58798 
8   19 
689.5434   49.14085 
8   19 
689.5441   49.14085 
8   19 
689.5434   49.1409 
8   19 
851.0614   47.78107 
8   19 
767.1202   48.48775 
8   19 
767.121   48.48775 
8   19 
767.1202   48.4878 
8   19 
868.9415   48.0129 
8   19 
868.9424   48.0129 
8   19 
868.9415   48.01294 
8   19 
972.7931   47.79523 
8   19 
972.7941   47.79523 
8   19 
972.7931   47.79528 
8   19 
1250.2   46.6826 
8   19 
1250.201   46.6826 
8   19 
1250.2   46.68264 
8   19 
1171.198   47.21282 
8   19 
1171.199   47.21282 
8   19 
1171.198   47.21287 
8   19 
1268.889   47.01321 
8   19 
1268.89   47.01321 
8   19 
1268.889   47.01325 
8   19 
1675.384   46.20141 
8   19 
1675.386   46.20141 
8   19 
1675.384   46.20146 
8   19 
1668.003   46.40986 
8   19 
1668.005   46.40986 
8   19 
1668.003   46.40991 
8   19 
1878.572   46.24582 
8   19 
1878.574   46.24582 
8   19 
1878.572   46.24587 
8   19 
2423.597   45.75141 
8   19 
2423.6   45.75141 
8   19 
2423.597   45.75145 
8   19 
2596.214   45.75326 
8   19 
2596.217   45.75326 
8   19 
2596.214   45.7533 
8   19 
3209.399   45.53578 
8   19 
3209.402   45.53578 
8   19 
3209.399   45.53582 
8   19 
3776.625   45.45089 
8   19 
3776.628   45.45089 
8   19 
3776.625   45.45093 
8   19 
4781.626   45.2202 
8   19 
4781.631   45.2202 
8   19 
4781.626   45.22024 
8   19 
5672.548   45.19595 
8   19 
5672.553   45.19595 
8   19 
5672.548   45.19599 
8   19 
7064.163   45.07168 
8   19 
7064.17   45.07168 
8   19 
7064.163   45.07173 
8   19 
8722.771   45.02306 
8   19 
8722.78   45.02306 
8   19 
8722.771   45.02311 
8   19 
10869.12   44.95209 
8   19 
10869.13   44.95209 
8   19 
10869.12   44.95214 
8   19 
13725.87   44.92489 
8   19 
13725.88   44.92489 
8   19 
13725.87   44.92493 
8   19 
17840.72   44.84421 
8   19 
17840.74   44.84421 
8   19 
17840.72   44.84425 
8   19 
22481.53   44.83962 
8   19 
22481.56   44.83962 
8   19 
22481.53   44.83966 
8   19 
28648.64   44.80857 
8   19 
28648.67   44.80857 
8   19 
28648.64   44.80861 
8   19 
36895.84   44.79564 
8   19 
36895.87   44.79564 
8   19 
36895.84   44.79568 
8   19 
47705.26   44.77629 
8   19 
47705.31   44.77629 
8   19 
47705.26   44.77633 
8   19 
62025.03   44.76985 
8   19 
62025.09   44.76985 
8   19 
62025.03   44.76989 
8   19 
79980.61   44.75602 
8   19 
79980.69   44.75602 
8   19 
79980.61   44.75606 
8   19 
97936.19   44.75445 
8   19 
97936.28   44.75445 
8   19 
97936.19   44.7545 
8   19 
115891.8   44.74907 
8   19 
115891.9   44.74907 
8   19 
115891.8   44.74911 
8   19 
133847.3   44.74733 
8   19 
133847.5   44.74733 
8   19 
133847.3   44.74737 
8   19 
151802.9   44.74512 
8   19 
151803.1   44.74512 
8   19 
151802.9   44.74516 
Fit Mean:  151802.9  Size:  44.74512  Code:  5 
Try Mean:  17.92771  Size:  0.1 
8   19 
17.92771   0.1 
8   19 
17.92771   0.1 
8   19 
17.92773   0.1 
8   19 
17.92771   0.100001 
8   19 
17.92795   0.1163947 
8   19 
17.92797   0.1163947 
8   19 
17.92795   0.1163957 
8   19 
20.12996   5.033596 
8   19 
20.12998   5.033596 
8   19 
20.12996   5.033601 
8   19 
30.65671   20.28922 
8   19 
30.65674   20.28922 
8   19 
30.65671   20.28924 
8   19 
51.58884   49.37072 
8   19 
51.58889   49.37072 
8   19 
51.58884   49.37077 
8   19 
60.2352   61.3584 
8   19 
60.23526   61.3584 
8   19 
60.2352   61.35846 
8   19 
73.03549   79.10297 
8   19 
73.03556   79.10297 
8   19 
73.03549   79.10305 
8   19 
83.3875   93.45287 
8   19 
83.38758   93.45287 
8   19 
83.3875   93.45297 
8   19 
92.3176   105.8314 
8   19 
92.31769   105.8314 
8   19 
92.3176   105.8315 
8   19 
97.97639   113.6752 
8   19 
97.97649   113.6752 
8   19 
97.97639   113.6753 
8   19 
100.4671   117.1275 
8   19 
100.4672   117.1275 
8   19 
100.4671   117.1276 
8   19 
101.0238   117.899 
8   19 
101.0239   117.899 
8   19 
101.0238   117.8991 
8   19 
101.0672   117.9589 
8   19 
101.0673   117.9589 
8   19 
101.0672   117.959 
8   19 
101.0681   117.9599 
8   19 
101.0682   117.9599 
8   19 
101.0681   117.96 
8   19 
101.0784   117.97 
8   19 
101.0785   117.97 
8   19 
101.0784   117.9702 
8   19 
101.091   117.9784 
8   19 
101.0911   117.9784 
8   19 
101.091   117.9785 
8   19 
101.1192   117.9869 
8   19 
101.1193   117.9869 
8   19 
101.1192   117.987 
8   19 
101.1722   117.9806 
8   19 
101.1723   117.9806 
8   19 
101.1722   117.9807 
8   19 
101.2872   117.9189 
8   19 
101.2873   117.9189 
8   19 
101.2872   117.919 
8   19 
101.5442   117.6849 
8   19 
101.5443   117.6849 
8   19 
101.5442   117.6851 
8   19 
102.1754   116.9261 
8   19 
102.1755   116.9261 
8   19 
102.1754   116.9262 
8   19 
104.0582   114.3083 
8   19 
104.0583   114.3083 
8   19 
104.0582   114.3084 
8   19 
132.9689   72.6993 
8   19 
106.9493   110.1474 
8   19 
106.9494   110.1474 
8   19 
106.9493   110.1475 
8   19 
149.2182   49.35085 
8   19 
111.1762   104.0677 
8   19 
111.1763   104.0677 
8   19 
111.1762   104.0678 
8   19 
176.0398   10.94886 
8   19 
117.6625   94.75583 
8   19 
117.6626   94.75583 
8   19 
117.6625   94.75592 
8   19 
118.4236   93.85245 
8   19 
118.4237   93.85245 
8   19 
118.4236   93.85254 
8   19 
121.0975   91.42776 
8   19 
121.0976   91.42776 
8   19 
121.0975   91.42785 
8   19 
128.971   85.4717 
8   19 
128.9711   85.4717 
8   19 
128.971   85.47179 
8   19 
133.7865   83.55369 
8   19 
133.7866   83.55369 
8   19 
133.7865   83.55377 
8   19 
147.1917   76.12856 
8   19 
147.1918   76.12856 
8   19 
147.1917   76.12863 
8   19 
147.482   77.81288 
8   19 
147.4821   77.81288 
8   19 
147.482   77.81296 
8   19 
156.5107   74.33619 
8   19 
156.5109   74.33619 
8   19 
156.5107   74.33627 
8   19 
196.2835   60.23973 
8   19 
160.488   72.92655 
8   19 
160.4882   72.92655 
8   19 
160.488   72.92662 
8   19 
177.9235   67.57874 
8   19 
177.9237   67.57874 
8   19 
177.9235   67.57881 
8   19 
172.0668   70.03185 
8   19 
172.0669   70.03185 
8   19 
172.0668   70.03192 
8   19 
177.8972   68.84735 
8   19 
177.8974   68.84735 
8   19 
177.8972   68.84742 
8   19 
212.0684   61.57998 
8   19 
189.5546   66.3681 
8   19 
189.5548   66.3681 
8   19 
189.5546   66.36817 
8   19 
211.2093   62.4836 
8   19 
211.2096   62.4836 
8   19 
211.2093   62.48366 
8   19 
209.3769   63.62121 
8   19 
209.3771   63.62121 
8   19 
209.3769   63.62128 
8   19 
221.6349   62.25325 
8   19 
221.6351   62.25325 
8   19 
221.6349   62.25332 
8   19 
272.8148   56.25261 
8   19 
234.6483   60.72749 
8   19 
234.6485   60.72749 
8   19 
234.6483   60.72755 
8   19 
270.0777   57.22014 
8   19 
270.0779   57.22014 
8   19 
270.0777   57.2202 
8   19 
259.2713   58.84296 
8   19 
259.2715   58.84296 
8   19 
259.2713   58.84302 
8   19 
271.7982   58.03122 
8   19 
271.7984   58.03122 
8   19 
271.7982   58.03128 
8   19 
341.5569   53.40653 
8   19 
293.5169   56.59137 
8   19 
293.5172   56.59137 
8   19 
293.5169   56.59142 
8   19 
334.6896   54.34372 
8   19 
334.69   54.34372 
8   19 
334.6896   54.34378 
8   19 
334.5459   54.86218 
8   19 
334.5462   54.86218 
8   19 
334.5459   54.86224 
8   19 
361.8424   54.01485 
8   19 
361.8428   54.01485 
8   19 
361.8424   54.0149 
8   19 
442.5726   51.33101 
8   19 
402.1216   52.67578 
8   19 
402.1221   52.67578 
8   19 
402.1216   52.67584 
8   19 
441.3968   51.78595 
8   19 
441.3972   51.78595 
8   19 
441.3968   51.786 
8   19 
488.1675   51.27677 
8   19 
488.1679   51.27677 
8   19 
488.1675   51.27682 
8   19 
588.3974   49.5112 
8   19 
588.3979   49.5112 
8   19 
588.3974   49.51125 
8   19 
564.3378   50.24993 
8   19 
564.3383   50.24993 
8   19 
564.3378   50.24998 
8   19 
605.4319   49.8379 
8   19 
605.4325   49.8379 
8   19 
605.4319   49.83795 
8   19 
786.3925   48.0345 
8   19 
786.3933   48.0345 
8   19 
786.3925   48.03454 
8   19 
717.5052   48.98871 
8   19 
717.5059   48.98871 
8   19 
717.5052   48.98876 
8   19 
770.4815   48.63486 
8   19 
770.4823   48.63486 
8   19 
770.4815   48.6349 
8   19 
1019.452   47.1334 
8   19 
890.3568   47.91193 
8   19 
890.3577   47.91193 
8   19 
890.3568   47.91198 
8   19 
973.0392   47.60626 
8   19 
973.0402   47.60626 
8   19 
973.0392   47.60631 
8   19 
1111.378   47.36058 
8   19 
1111.379   47.36058 
8   19 
1111.378   47.36063 
8   19 
1359.017   46.63493 
8   19 
1359.019   46.63493 
8   19 
1359.017   46.63497 
8   19 
1416.179   46.71241 
8   19 
1416.18   46.71241 
8   19 
1416.179   46.71246 
8   19 
1675.493   46.39005 
8   19 
1675.494   46.39005 
8   19 
1675.493   46.3901 
8   19 
2013.143   46.04564 
8   19 
2013.145   46.04564 
8   19 
2013.143   46.04569 
8   19 
2372.563   45.88971 
8   19 
2372.565   45.88971 
8   19 
2372.563   45.88975 
8   19 
2884.872   45.60674 
8   19 
2884.875   45.60674 
8   19 
2884.872   45.60679 
8   19 
3477.888   45.51989 
8   19 
3477.892   45.51989 
8   19 
3477.888   45.51994 
8   19 
4314.484   45.2851 
8   19 
4314.488   45.2851 
8   19 
4314.484   45.28515 
8   19 
5061.022   45.23621 
8   19 
5061.027   45.23621 
8   19 
5061.022   45.23626 
8   19 
6165.584   45.14031 
8   19 
6165.59   45.14031 
8   19 
6165.584   45.14036 
8   19 
7579.961   45.08377 
8   19 
7579.968   45.08377 
8   19 
7579.961   45.08381 
8   19 
9768.463   44.95079 
8   19 
9768.473   44.95079 
8   19 
9768.463   44.95084 
8   19 
12178.29   44.94892 
8   19 
12178.3   44.94892 
8   19 
12178.29   44.94896 
8   19 
15451.86   44.87738 
8   19 
15451.88   44.87738 
8   19 
15451.86   44.87742 
8   19 
19552.25   44.84788 
8   19 
19552.27   44.84788 
8   19 
19552.25   44.84793 
8   19 
24626.12   44.82797 
8   19 
24626.14   44.82797 
8   19 
24626.12   44.82801 
8   19 
31658.42   44.80293 
8   19 
31658.45   44.80293 
8   19 
31658.42   44.80298 
8   19 
40789.83   44.79087 
8   19 
40789.87   44.79087 
8   19 
40789.83   44.79091 
8   19 
53185.54   44.76982 
8   19 
53185.59   44.76982 
8   19 
53185.54   44.76986 
8   19 
69476.54   44.76952 
8   19 
69476.61   44.76952 
8   19 
69476.54   44.76956 
Fit Mean:  69476.54  Size:  44.76952  Code:  1 
> 
> cat("Final Fit Mean: ", nb_fit_mu, " Size: ", nb_fit_size, " Code: ", nb_fit$code, " Try Size: ", try_size, "\n")
Final Fit Mean:  69476.54  Size:  44.76952  Code:  1  Try Size:  0.1 
> 
> ## Fit failed = reset parameters so graphing and output code can recognize this
> if ((nb_fit_mu < 0) || (nb_fit_size < 0) || (nb_fit$code != 1))
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> 
> ## things can go wrong with fitting and we can still end up with invalid values
> 
> fit_nb = c()
> included_fract = 0
> if (nb_fit_mu > 0)
+ {
+   end_fract = pnbinom(end_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   start_fract = pnbinom(start_i_for_fits, mu = nb_fit_mu, size=nb_fit_size)
+   included_fract = end_fract-start_fract;
+ 
+   if (included_fract >= 0.01) {
+ 
+     ## Adjust so that we are back in full coords before making fit!!
+     if (num_per_bin > 1) 
+     {
+       nb_fit_mu = nb_fit_mu * num_per_bin
+     }
+     fit_nb = dnbinom(0:max(X$coverage), mu = nb_fit_mu, size=nb_fit_size)*inner_total/included_fract;
+   }
+ }
> 
> ## If an insufficient amount of fit was included, then invalidate it
> if (included_fract < 0.01)
+ {
+   nb_fit_mu = 0
+   nb_fit_size = 0
+ }
> 
> f_p <- function(par) {
+ 
+   lambda = par[1];
+ 
+   if (lambda <= 0)
+   {
+     return(0);
+   }
+   
+ 	total <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{	
+     #cat(i, " ", lambda, "\n");
+ 		dist[i] <- dpois(i, lambda=lambda);
+ 		total <- total + dist[i] 
+ 	}
+ 	#print (total)
+ 
+  	l <- 0;
+ 	for (i in start_i_for_fits:end_i_for_fits)
+ 	{
+ 		l <- l + ((X.for.fits[i]/inner_total)-(dist[i]/total))^2;
+ 	}
+ 	return(l);
+ }
> 
> 
> ## Fit Poisson 
> ## - allow fit to fail and set all params to zero/empty if that is the case
> 
> p_fit = NULL
> try(suppressWarnings(p_fit<-nlm(f_p, c(m), print.level=this.print.level)))
> 
> fit_p = c()
> if (!is.null(p_fit) && (p_fit$estimate[1] > 0))
+ {
+   #print (nb_fit$estimate[1])
+   p_fit_lambda = p_fit$estimate[1];
+   #print(0:max(X$coverage))
+ 
+   end_fract = ppois(end_i_for_fits, lambda = p_fit_lambda)
+   start_fract = ppois(start_i_for_fits, lambda = p_fit_lambda)
+   included_fract = end_fract-start_fract;
+ 
+   ## Adjust so that we are back in full coords before making fit!!
+   if (num_per_bin > 1) 
+   {
+     p_fit_lambda = p_fit_lambda * num_per_bin
+   }
+   fit_p<-dpois(0:max(X$coverage), lambda = p_fit_lambda)*inner_total/included_fract;
+ }
> 
> 
> ## Graphing
> ##
> ## don't graph very high values with very little coverage
> i<-max_i
> while (i <= length(X$n) && X$n[i]>0.01*max_n)
+ {		
+ 	i <- i+1;
+ }
> graph_end_i <-i
> 
> ## Ths leaves enough room to the right of the peak for the legend
> graph_end_i = max(floor(2.2 * max_i), graph_end_i);
> 
> ## graphics settings
> my_pch = 21
> my_col = "black";
> my_col_censored = "red";
> 
> if (pdf_output == 0) {
+   
+   ## bitmap() requires ghostscript to be installed.
+   ## taa=4, gaa=2 options NOT compatible with earlier R versions!
+   ## units = "px" NOT compatible with even earlier R versions!
+   
+   if(!capabilities(what = "png"))
+   {
+     ## fallback to ghostscript
+     bitmap(plot_file, height=6, width=7, type = "png16m", res = 72, pointsize=18)
+   } else {
+     ## use X11 function, which gives better resolution
+     png(plot_file, height=6, width=7, units ="in", res = 72, pointsize=18)
+     par(family="sans")
+   }
+ } else {
+   pdf(plot_file, height=6, width=7)
+   par(family="sans")
+ }
> 
> par(mar=c(5.5,7.5,3,1.5));
> 
> max_y = 0
> if (plot_poisson) {
+ 	max_y = max(X$n, fit_p, fit_nb)
+ } else {
+ 	max_y = max(X$n, fit_nb)
+ }
> 
> plot(0:10, 0:10, type="n", lty="solid", ylim=c(0, max_y)*1.05, xlim=c(0, graph_end_i), lwd=1, xaxs="i", yaxs="i", axes=F, las=1, main="Coverage Distribution at Unique-Only Positions", xlab="Coverage depth (reads)", ylab="", cex.lab=1.2, cex.axis=1.2)
> 
> mtext(side = 2, text = "Number of reference positions", line = 5.5, cex=1.2)
> 
> sciNotation <- function(x, digits = 1) {
+     if (length(x) > 1) {
+         return(append(sciNotation(x[1]), sciNotation(x[-1])))     
+ 	} 
+     if (!x) return(0) 
+ 
+ 	exponent <- floor(log10(x)) 
+     base <- round(x / 10^exponent, digits)     
+ 	as.expression(substitute(base %*% 10^exponent, list(base = base, exponent = exponent))) 
+ }
> 
> #axis(2, cex.lab=1.2, las=1, cex.axis=1.2, labels=T, at=(0:6)*50000)
> axis(2, cex.lab=1.2, las=1, cex.axis=1.2, at = axTicks(2), labels = sciNotation(axTicks(2), 1))
> axis(1, cex.lab=1.2, cex.axis=1.2, labels=T)
> box()
> 
> #graph the coverage as points
> fit_data <- subset(X, (coverage>=start_i) & (coverage<=end_i) );
> points(fit_data$coverage, fit_data$n, pch=my_pch, col=my_col, bg="white", cex=1.2)
> 
> #graph the censored coverage as red points
> cat(start_i, " ", end_i, "\n", sep="")
8 19
> 
> censored_data <- subset(X, (coverage<start_i) | (coverage>end_i) );
> points(censored_data$coverage, censored_data$n, pch=my_pch, col=my_col_censored, bg="white", cex=1.2)
> 
> #graph the poisson fit IF REQUESTED
> if (plot_poisson) {
+ 	lines(0:max(X$coverage), fit_p, lwd=3, lty="22", col="black");
+ }
> 
> #graph the negative binomial fit
> if (nb_fit_mu > 0) {
+   lines(0:max(X$coverage), fit_nb, lwd=3, col="black");
+ }
> 
> if (plot_poisson) {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial", "Poisson"), lty=c("blank","blank","solid","22"), lwd=c(1,1,2,2), pch=c(my_pch, my_pch, -1, -1), col=c("black", "red", "black", "black"), bty="n")
+ } else {
+ 	legend("topright", c("Coverage distribution", "Censored data", "Negative binomial"), lty=c("blank","blank","solid"), lwd=c(1,1,2), pch=c(my_pch, my_pch, -1), col=c("black", "red", "black"), bty="n")
+ }
> 
> dev.off()
null device 
          1 
> 
> ## Fit the marginal value that we use for propagating deletions
> 
> if (nb_fit_mu > 0) {
+   cat(nb_fit_size, " ", nb_fit_mu, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = nb_fit_size, mu = nb_fit_mu))
+ } else {
+   cat("Fallback to calculating off an estimate of just variance = mu + mu^2/size\n")
+   size_estimate = (1/(v-m))*(m*m)
+   cat("Mu estimate=", m," Size estimate =", size_estimate, "\n")
+   deletion_propagation_coverage = suppressWarnings(qnbinom(deletion_propagation_pr_cutoff, size = size_estimate, mu = m))
+   if (is.na(deletion_propagation_coverage) || is.nan(deletion_propagation_coverage) || (deletion_propagation_coverage < 1)) {
+     cat("Double fallback to calculating as just 10% of the mean\n")
+     deletion_propagation_coverage = m * 0.1
+   }
+ }
Fallback to calculating off an estimate of just variance = mu + mu^2/size
Mu estimate= 17.92771  Size estimate = -25.5253 
Double fallback to calculating as just 10% of the mean
> 
> #Don't allow one read to indicate non-deleted regions
> if (deletion_propagation_coverage < 1) {
+     deletion_propagation_coverage = 1
+ }
> 
> #This works fine with the negative values
> #If we have both low fit coverage and low straight average coverage then we're deleted...
> if ( (nb_fit_mu <= 3) && (m <= 3) ) {
+   deletion_propagation_coverage = -1
+ }
> 
> #print out statistics
> 
> print(nb_fit_size);
[1] 0
> print(nb_fit_mu);
[1] 0
> 
> print(m)
[1] 17.92771
> print(v)
[1] 5.336174
> print(D)
[1] 0.2976495
> 
> print(deletion_propagation_coverage)
[1] 1.792771
> 
> warnings()
> 
