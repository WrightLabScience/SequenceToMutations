replacement = '\\1',
x = grep(pattern_gene_product, muts[j,], value=TRUE))
df$PGAPtmp[j] <- gsub(pattern = pattern_pgaptmp,
replacement = '\\1',
x = grep(pattern_pgaptmp, muts[j,], value=TRUE))
df$Category[j] <- gsub(pattern = pattern_mutation_category,
replacement = '\\1',
x = grep(pattern_mutation_category, muts[j,], value=TRUE))
gene_position <- grep(pattern_gene_position, muts[j,], value=TRUE)
gene_position <- gsub('^gene_position=', '', gene_position)
if (grepl('|', df$Category[j], fixed=TRUE)) { # for overlapping genes, a single mutation will be in both genes, shit is a mess
df$GenePosition[j] <- gene_position
cat('WOW!!', df$Category[j], '\n')
next
}
# if gene_position is empty, this may be a whole contig deletion
if (length(gene_position) == 0L) {
pos_start <- as.integer(gsub(pattern_position_start, '\\1', grep(pattern_position_start, muts[j,], value=TRUE)))
pos_end <- as.integer(gsub(pattern_position_end, '\\1', grep(pattern_position_end, muts[j,], value=TRUE)))
df$GenePosition[j] <- paste0(pos_start, '-', pos_end)
pgaptmps <- gsub(pattern_pgaptmp_multiple, '\\1', grep(pattern_pgaptmp_multiple, muts[j,], value=TRUE))
overlap_pgaptmps <- grep(pattern_pgaptmp_overlapping, muts[j,], value=TRUE)
if (length(overlap_pgaptmps) > 0L)
pgaptmps <- paste0(pgaptmps, ',',
gsub(pattern_pgaptmp_overlapping, '\\1', overlap_pgaptmps))
df$PGAPtmp[j] <- pgaptmps
df$Location[j] <- 'wholeGene'
if (pos_start == 1L & pos_end == df$ContigLength[j]) {
df$Mutation[j] <- 'WHOLE_CONTIG_ABSENT'
} else {
df$Mutation[j] <- df$GenePosition[j]
}
next
}
# single position, could be insertion/deletion?
if (grepl('^[0-9]+$', gene_position)) {
df$GenePosition[j] <- gene_position
# df$Location[j] <- 'coding' # not totally positive I can do this yet
# if nonsense or nonsynonymous, write mutation in OLD_AA CODON NEW_AA
if (df$Category[j] %in% c('snp_nonsense', 'snp_nonsynonymous')) {
df$Location[j] <- 'coding'
AA_ref <- gsub(pattern_aa_ref_seq, '\\1', grep(pattern_aa_ref_seq, muts[j,], value=TRUE))
AA_codon_pos <- gsub(pattern_aa_position, '\\1', grep(pattern_aa_position, muts[j,], value=TRUE))
AA_new <- gsub(pattern_aa_new_seq, '\\1', grep(pattern_aa_new_seq, muts[j,], value=TRUE))
df$Mutation[j] <- paste0(AA_ref, AA_codon_pos, AA_new)
# if synonymous
} else if (df$Category[j] == 'snp_synonymous') {
df$Location[j] <- 'coding'
NUC_ref <- gsub(pattern_nuc_ref_seq, '\\1', grep(pattern_nuc_ref_seq, muts[j,], value=TRUE))
NUC_new <- unlist(muts[j,6]) # column 6 in this case has the mutated nucleotide
df$Mutation[j] <- paste0(df$GenePosition[j], NUC_ref, '>', NUC_new)
# if a type we haven't handled yet
} else {
cat('STOP!!!!', i, j, df$Category[j])
break
}
next # we can skip to the next mutation, because we got all the data we needed
}
# intergenic position
if (grepl(pattern_gene_position_intergenic, gene_position)) {
df$Location[j] <- 'intergenic'
df$GenePosition[j] <- gsub(pattern_gene_position_intergenic, '\\1', gene_position)
gene_position_for_mutation <- unlist(muts[j,5])
}
# coding position
if (grepl(pattern_gene_position_other, gene_position)) {
df$Location[j] <- 'coding'
if (df$Category[j] == 'snp_noncoding') df$Location[j] <- 'noncoding'
df$GenePosition[j] <- gsub(pattern_gene_position_other, '\\2', gene_position)
gene_position_for_mutation <- paste0(df$GenePosition[j], '/',
gsub(pattern_gene_position_other, '\\4', gene_position))
}
# create mutation notations intergenic/coding indels AND snp_intergenics
if (df$Category[j] %in% c('large_deletion', 'small_indel', 'large_insertion', 'large_amplification', 'large_substitution')) {
indel_flag <- tolower(muts[j,1])
indel_length_or_nucleotides <- unlist(muts[j,6])
if (df$Category[j] == 'large_insertion') { # if this is a large insertion, we don't want to display the literal string of nucleotides that were inserted, but rather the length of the insertion
indel_length_or_nucleotides <- length(unlist(strsplit(indel_length_or_nucleotides, split='')))
}
df$Mutation[j] <- paste0('(', gene_position_for_mutation, ')', indel_flag, indel_length_or_nucleotides)
} else if (df$Category[j] %in% c('snp_intergenic', 'snp_pseudogene', 'snp_noncoding')) {
NUC_ref <- gsub(pattern_nuc_ref_seq, '\\1', grep(pattern_nuc_ref_seq, muts[j,], value=TRUE))
NUC_new <- unlist(muts[j,6]) # column 6 in this case has the mutated nucleotide
df$Mutation[j] <- paste0(unlist(muts[j,5]), NUC_ref, '>', NUC_new) # column 5 has the contig position of the SNP if it is intergenic
} else {
cat('STOP!!!', i, j, df$Category[j], '\n')
break
}
}
mutations_list[[i]] <- df
}
mutations_list
names(mutations_list)
save(mutations_list, file = 'RdataFiles/mutations_list.Rdata')
# Load necessary data.
load(file = 'RdataFiles/ancestor_gbk_dataframes.Rdata') # all ancestor assmebly gene and gene product information
load(file = 'RdataFiles/mutations_list.Rdata') # all evolved lineage mutations tables
# Get a vector of gene products that are present in all strains.
gene_prods <- Reduce(intersect, sapply(gbkDF_list, '[[', 'GeneProduct'))
groups <- c('VAN-exposed', 'VAN-unexposed')
strains <- names(gbkDF_list)
strains
strains <- gsub('^Annot_(.+)', '\\1', names(gbkDF_list))
# Create a matrix of counts. Rows are each gene product. Columns are each group.
sig_genes <- matrix(0L,
nrow = length(gene_prods),
ncol = length(groups),
dimnames = list(gene_prods,
groups))
s
s <-
1
# load(file = '~/Desktop/VRSA/Sequencing/FindRelevantMuts/plasmid_genes.Rdata')
load(file = '~/Desktop/VRSA/Sequencing_V2/RdataFiles/df_muts_c50.Rdata')
load(file = 'RdataFiles/mutations_list.Rdata') # all evolved lineage mutations tables
names(mutations_list)
split(mutations_list, gsub('^([0-9]+).+', '\\1', names(mutations_list)))
str(split(mutations_list, gsub('^([0-9]+).+', '\\1', names(mutations_list))))
# Re-organize mutations_list to split by strain, then further split by VAN-exposed and VAN-unexposed lineages
mutations_list <- str(split(mutations_list, gsub('^([0-9]+).+', '\\1', names(mutations_list))))
load(file = 'RdataFiles/mutations_list.Rdata') # all evolved lineage mutations tables
# Re-organize mutations_list to split by strain, then further split by VAN-exposed and VAN-unexposed lineages
mutations_list <- split(mutations_list, gsub('^([0-9]+).+', '\\1', names(mutations_list)))
names(mutations_list)
lapply(mutations_list, function(mlist) split(mlist, gsub('.+(m|p)$', '\\1', names(mlist))))
mutations_list <- lapply(mutations_list, function(mlist) split(mlist, gsub('.+(m|p)$', '\\1', names(mlist))))
str(mutations_list)
save(mutations_list, file = 'RdataFiles/mutations_list.Rdata')
# Load necessary data.
load(file = 'RdataFiles/ancestor_gbk_dataframes.Rdata') # all ancestor assmebly gene and gene product information
# Get a vector of gene products that are present in all strains.
gene_prods <- Reduce(intersect, sapply(gbkDF_list, '[[', 'GeneProduct'))
groups <- c('VAN-exposed', 'VAN-unexposed')
strains <- gsub('^Annot_(.+)', '\\1', names(gbkDF_list))
# Create a matrix of counts. Rows are each gene product. Columns are each group.
sig_genes <- matrix(0L,
nrow = length(gene_prods),
ncol = length(groups),
dimnames = list(gene_prods,
groups))
s <- 1
mutations_list[[s]][[g]]
g <- 1
mutations_list[[s]][[g]]
l <- 1
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
lineage_mut_list
lin <- lineage_mut_list
lin
unique(unlist(lin$PGAPtmp))
pgap_ids <- unique(unlist(lin$PGAPtmp))
pgap_ids <- unlist(strsplit(pgap_ids, ',')) # 382
pgap_ids <- unlist(strsplit(pgap_ids, '/')) # 382
pgap_ids <- unique(pgap_ids) # 217
pgap_ids <- pgap_ids[pgap_ids != '–']
pgap_ids
(!all(pgap_ids %in% VRSAprods[[s]]$PGAP_ID))
!all(pgap_ids %in% gbkDF_list[[s]]$PGAPtmp)
gbkDF_list[[s]]$GeneProdName[which(gbkDF_list[[s]]$PGAPtmp %in% pgap_ids)]
gbkDF_list[[s]]$GeneProdName
s
genes <- gbkDF_list[[s]]$GeneProduct[which(gbkDF_list[[s]]$PGAPtmp %in% pgap_ids)]
genes <- genes[genes != '–']
genes <- genes[genes != 'hypothetical protein']
# get list of gene product names that have any mutation in a given lineage.
getGenes <- function(lin, s) {
if (is.null(lin))
return('')
pgap_ids <- unique(unlist(lin$PGAPtmp))
pgap_ids <- unlist(strsplit(pgap_ids, ',')) # 382
pgap_ids <- unlist(strsplit(pgap_ids, '/')) # 382
pgap_ids <- unique(pgap_ids) # 217
pgap_ids <- pgap_ids[pgap_ids != '–']
if (!all(pgap_ids %in% gbkDF_list[[s]]$PGAPtmp)) {
print('wtf!')
break
}
genes <- gbkDF_list[[s]]$GeneProduct[which(gbkDF_list[[s]]$PGAPtmp %in% pgap_ids)]
genes <- genes[genes != '–']
genes <- genes[genes != 'hypothetical protein']
return(genes)
}
getGenes(lineage_mut_list)
names(mutations_list)
names(mutations_list[[1]])
groups <- c('VAN-unexposed', 'VAN-exposed')
strains <- gsub('^Annot_(.+)', '\\1', names(gbkDF_list))
# Create a matrix of counts. Rows are each gene product. Columns are each group.
sig_genes <- matrix(0L,
nrow = length(gene_prods),
ncol = length(groups),
dimnames = list(gene_prods,
groups))
# get list of gene product names that have any mutation in a given lineage.
getGenes <- function(lin, s) {
if (is.null(lin))
return('')
pgap_ids <- unique(unlist(lin$PGAPtmp))
pgap_ids <- unlist(strsplit(pgap_ids, ',')) # 382
pgap_ids <- unlist(strsplit(pgap_ids, '/')) # 382
pgap_ids <- unique(pgap_ids) # 217
pgap_ids <- pgap_ids[pgap_ids != '–']
if (!all(pgap_ids %in% gbkDF_list[[s]]$PGAPtmp)) {
print('wtf!')
break
}
genes <- gbkDF_list[[s]]$GeneProduct[which(gbkDF_list[[s]]$PGAPtmp %in% pgap_ids)]
genes <- genes[genes != '–']
genes <- genes[genes != 'hypothetical protein']
return(genes)
}
genes <- genes[genes %in% gene_prods]
for (s in seq_along(strains)) { # Loop over strains
for (g in seq_along(groups)) { # Loop over groups (VAN+ and VAN-)
for (l in seq_along(mutations_list[[s]][[g]])) {
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
genes <- getGenes(lineage_mut_list, s)
van_spec50[genes, ] <- van_spec50[genes, 'VAN-unexposed'] + 1
}
}
}
for (s in seq_along(strains)) { # Loop over strains
for (g in seq_along(groups)) { # Loop over groups (VAN+ and VAN-)
for (l in seq_along(mutations_list[[s]][[g]])) {
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
genes <- getGenes(lineage_mut_list, s)
sig_genes[genes, ] <- van_spec50[genes, 'VAN-unexposed'] + 1
}
}
}
for (s in seq_along(strains)) { # Loop over strains
for (g in seq_along(groups)) { # Loop over groups (VAN+ and VAN-)
for (l in seq_along(mutations_list[[s]][[g]])) {
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
genes <- getGenes(lineage_mut_list, s)
sig_genes[genes, ] <- sig_genes[genes, 'VAN-unexposed'] + 1
}
}
}
for (s in seq_along(strains)) { # Loop over strains
for (g in seq_along(groups)) { # Loop over groups (VAN+ and VAN-)
for (l in seq_along(mutations_list[[s]][[g]])) {
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
genes <- getGenes(lineage_mut_list, s)
sig_genes[genes, ] <- sig_genes[genes, groups[g]] + 1
}
}
}
g
groups
head(sig_genes)
rm(pgap_ids, genes)
# Load necessary data.
load(file = 'RdataFiles/ancestor_gbk_dataframes.Rdata') # all ancestor assmebly gene and gene product information
load(file = 'RdataFiles/mutations_list.Rdata') # all evolved lineage mutations tables
# Get a vector of gene products that are present in all strains.
gene_prods <- Reduce(intersect, sapply(gbkDF_list, '[[', 'GeneProduct'))
groups <- c('VAN-unexposed', 'VAN-exposed')
strains <- gsub('^Annot_(.+)', '\\1', names(gbkDF_list))
# Create a matrix of counts. Rows are each gene product. Columns are each group.
sig_genes <- matrix(0L,
nrow = length(gene_prods),
ncol = length(groups),
dimnames = list(gene_prods,
groups))
# get list of gene product names that have any mutation in a given lineage.
getGenes <- function(lin, s) {
pgap_ids <- unique(unlist(lin$PGAPtmp))
pgap_ids <- unlist(strsplit(pgap_ids, ',')) # 382
pgap_ids <- unlist(strsplit(pgap_ids, '/')) # 382
pgap_ids <- unique(pgap_ids) # 217
pgap_ids <- pgap_ids[pgap_ids != '–']
if (!all(pgap_ids %in% gbkDF_list[[s]]$PGAPtmp)) {
print('wtf!')
break
}
genes <- gbkDF_list[[s]]$GeneProduct[which(gbkDF_list[[s]]$PGAPtmp %in% pgap_ids)]
genes <- genes[genes != '–']
genes <- genes[genes != 'hypothetical protein']
genes <- genes[genes %in% gene_prods]
return(genes)
}
s <-
1
g <- 1
l <- 1
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
if (is.null(lineage_mut_list))
next
genes <- getGenes(lineage_mut_list, s)
sig_genes[genes, groups[g]]
for (s in seq_along(strains)) { # Loop over strains
for (g in seq_along(groups)) { # Loop over groups (VAN+ and VAN-)
for (l in seq_along(mutations_list[[s]][[g]])) {
lineage_mut_list <- mutations_list[[s]][[g]][[l]]
if (is.null(lineage_mut_list))
next
genes <- getGenes(lineage_mut_list, s)
sig_genes[genes, groups[g]] <- sig_genes[genes, groups[g]] + 1
}
}
}
sig_genes
sig_genes <- data.frame(sig_genes)
pvals <- oddsRs <- numeric(nrow(sig_genes))
num_lins <- 2 # Mine was actually 96 VAN-unexposed/exposed lineages each
# mutation counts
ve_mut <- sig_genes$VAN.exposed[i]
i <- 1
ve_mut <- sig_genes$VAN.exposed[i]
ve_nomut <- num_lins - ve_mut
vu_mut <- sig_genes$VAN.unexposed[i]
vu_nomut <- num_lines - vu_mut
vu_nomut <- num_lins - vu_mut
mat <- matrix(c(ve_mut, ve_nomut,
vu_mut, vu_nomut),
ncol=2)
ft <- fisher.test(mat)
pvals50[i] <- ft$p.value
pvals[i] <- ft$p.value
mat
rm(ve_mut, ve_nomut, vu_mut, vu_nomut)
# mutation counts
mat <- matrix(c(sig_genes$VAN.exposed[i],
1 - sig_genes$VAN.exposed[i],
sig_genes$VAN.unexposed[i],
1 - sig_genes$VAN.unexposed[i]),
ncol=2)
mat
num_lins <- 2 # Mine was actually 96 VAN-unexposed/exposed lineages each
pvals <- oddsRs <- numeric(nrow(sig_genes))
# mutation counts
ve_mut <- sig_genes$VAN.exposed[i]
ve_nomut <- num_lins - ve_mut
vu_mut <- sig_genes$VAN.unexposed[i]
vu_nomut <- num_lins - vu_mut
mat <- matrix(c(ve_mut, ve_nomut,
vu_mut, vu_nomut),
ncol=2)
ft <- fisher.test(mat)
pvals[i] <- ft$p.value
oddsRs[i] <- ((ve_mut + 1) * (vu_nomut + 1)) / ((ve_nomut + 1) * (vu_mut + 1))
for (i in seq_len(nrow(sig_genes))) {
# mutation counts
ve_mut <- sig_genes$VAN.exposed[i]
ve_nomut <- num_lins - ve_mut
vu_mut <- sig_genes$VAN.unexposed[i]
vu_nomut <- num_lins - vu_mut
mat <- matrix(c(ve_mut, ve_nomut,
vu_mut, vu_nomut),
ncol=2)
ft <- fisher.test(mat)
pvals[i] <- ft$p.value
oddsRs[i] <- ((ve_mut + 1) * (vu_nomut + 1)) / ((ve_nomut + 1) * (vu_mut + 1))
}
pvals
oddsRs
# Add columns to data.frame for transformed p-values and odds ratios*
sig_genes$pval <- -log10(pvals)
sig_genes$OR <- oddsRs
head(sig_genes[order(log(sig_genes$OR), decreasing=T), ])
# Bonferroni-corrected p-value=0.01 threshold.
pval_cutoff <- -log10(0.01 / nrow(sig_genes))
pcex <- 0.75
pcex
pcex <- 0.75
# Function to plot proportion of
mutsXY <- function(df) {
plot(x = df$VAN.exposed / num_lins,
y = df$VAN.unexposed / num_lins,
xlim = c(0, 1),
ylim = c(0, 1),
xpd = NA,
xaxt = 'n', xaxs = 'i',
yaxt = 'n', yaxs = 'i',
xlab = 'proportion in VAN-exposed',
ylab = 'proportion in VAN-unexposed',
pch = pch_vec,
col = col_vec,
bg = col_vec,
cex = pcex)
axis(side = 1,
at = seq(0, 1, 0.2),
labels = seq(0, 1, .2))
axis(side = 2,
las = 1,
at = seq(0, 1, 0.2),
labels = seq(0, 1, .2))
abline(a=0, b=1)
}
mutsXY(sig_genes)
pch_vec <- 16
mutsXY(sig_genes)
# Plotting variables.
col_vec <- '#bbbbbb'
mutsXY(sig_genes)
# Plotting variables.
col_vec <- '#000000aa'
mutsXY(sig_genes)
# Plotting variables.
col_vec <- '#00000077'
mutsXY(sig_genes)
# Plotting variables.
col_vec <- '#bbbbbb'
volcano <- function(df, xlimit=6, ylim=c(-0.25,30)) {
plot(x = log(df$OR),
y = df$pval,
xlim = c(-xlimit, xlimit),
ylim = ylim,
yaxs = 'i',
xlab = '',
ylab = '',
pch = pch_vec,
cex = pcex,
bg = col_vec,
yaxt = 'n',
col = col_vec)
title(xlab = 'Vancomycin specificity score', line=1.75, xpd=NA)
title(ylab = expression('-Log'[10]*'(p-value)'), line=1.75)
abline(h = pval_cutoff, lty = 2, lwd=0.8)
abline(v = 0, lty=3, lwd=1.2, col='#00000066')
axis(side = 2, at = seq(0, 25, 5), las = 1)
text(x = 6.35,
y = 5.4 + c(0.5, -0.5),
adj = c(1, 0.5),
cex = tcex,
labels = c('Bonferonni-corrected', 'p-value cutoff'))
}
# Make plots
{
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
}
tcex
tcex <- 1
# Make plots
{
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
}
# Function to plot proportion of
mutsXY <- function(df) {
plot(x = df$VAN.exposed / num_lins,
y = df$VAN.unexposed / num_lins,
xlim = c(0, 1),
ylim = c(0, 1),
xpd = NA,
xaxt = 'n', xaxs = 'i', xlab = '',
yaxt = 'n', yaxs = 'i', ylab = '',
pch = pch_vec,
col = col_vec,
bg = col_vec,
cex = pcex)
title(xlab = 'proportion in VAN-exposed', line=1.75)
title(ylab = 'proportion in VAN-unexposed', line=1.75)
axis(side = 1,
at = seq(0, 1, 0.2),
labels = seq(0, 1, .2))
axis(side = 2,
las = 1,
at = seq(0, 1, 0.2),
labels = seq(0, 1, .2))
abline(a=0, b=1)
}
# Make plots
{
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
}
# Make plots
{
pdf(file = 'Plots/significant_mutations.pdf')
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
dev.off()
}
# Make plots
{
pdf(file = 'Plots/significant_mutations.pdf', width=7)
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
dev.off()
}
# Make plots
{
pdf(file = 'Plots/significant_mutations.pdf', width=10)
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
dev.off()
}
# Make plots
{
pdf(file = 'Plots/significant_mutations.pdf', width=10, height=6)
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
dev.off()
}
# Make plots
{
pdf(file = 'Plots/significant_mutations.pdf', width=10, height=5)
par(mfrow=c(1,2), tck=-0.015, mgp=c(1.5,0.5,0), mar=c(3,3,2,1))
volcano(df=sig_genes)
mutsXY(df=sig_genes)
dev.off()
}
